/*** Generated by streamline fibers 0.1.0 - DO NOT EDIT ***/var fstreamline__ = require("streamline/lib/fibers/runtime"); (fstreamline__.create(function(_) { /**
 * Copyright (c) 2011 Bruno Jouhier <bruno.jouhier@sage.com>
 * MIT License
 *
 * streamline.options = { "lines": "preserve" }
 */

/// !doc
/// # streamline/lib/tools/docTool
///  
/// Documentation tool
/// 
/// Usage:
/// 
///      node streamline/lib/tools/docTool [path]
/// 
/// Extracts documentation comments from `.js` files and generates `API.md` file 
/// under package root.
/// 
/// Top of source file must contain `/// !doc` marker to enable doc extraction.  
/// Documentation comments must start with `/// ` (with 1 trailing space).  
/// Extraction can be turned off with `/// !nodoc` and turned back on with `/// !doc`.
/// 
/// The tool can also be invoked programatically with:
/// 
var fs = require('fs');
var fsp = require('path');

/// * `doc = docTool.generate(_, path)`
///   extracts documentation comments from file `path`
exports.generate = fstreamline__.create(function(_, path, options) {var _generate_ = fstreamline__.create(_generate);
	options = options || {}
	function _generate(_, path, dontSave) { var __tmp;
		var stat = fstreamline__.invoke(fs, "stat", [path, _], 1);
		if (stat.isFile()) {
			if (path.indexOf('.js') == path.length - 3 && path.indexOf('--fibers.js') < 0) {
				var inside;
				var doc = fstreamline__.invoke(fs, "readFile", [path, "utf8", _], 2).split('\n').map( function(line) {
					var i = line.indexOf('//' + '/ ');
					line = i >= 0 ? line.substring(i + 4) : null;
					if (line === "!doc") {
						inside = true;
					} else if (line === "!nodoc") {
						inside = false;
					} else
						return inside && line != null ? line + "\n" : null;
				}).filter( function(line) {
					return line != null;
				}).join("");
				return doc || "";
			}
			return "";
		} else if (stat.isDirectory()) {
			var split = path.split("/");
			var isPackage = split[split.length - 2] == 'node_modules';
			var doc = "";
			var files = fstreamline__.invoke(fs, "readdir", [path, _], 1);
			for (var i = 0; i < files.length; i++) {
				 __tmp = (__tmp = fstreamline__.invoke(null, _generate_, [_, path + "/" + files[i], isPackage || dontSave], 0), doc += __tmp);
			}
			if (isPackage && !dontSave && doc) {
				fstreamline__.invoke(fs, "writeFile", [path + "/API.md", doc, "utf8", _], 3);
				if (options.verbose)
					console.log("generated " + path + "/API.md");
				doc = "";
			}
			return doc;
		} else
			return "";
	}
	fstreamline__.invoke(null, _generate_, [_, path], 0);

}, 0)
if (process.argv[1] && process.argv[1].indexOf("/docTool") >= 0)
	fstreamline__.invoke(exports, "generate", [_, fsp.join(process.cwd(), process.argv[2] || '.'), { verbose: true }], 0);

}, 0).call(this, function(err) {
  if (err) throw err;
}));