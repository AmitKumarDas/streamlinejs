/*** Generated by streamline 0.1.23 - DO NOT EDIT ***/

"use strict";
var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn) { var ctx = __global.__context; return function(err, result) { __global.__context = ctx; if (err) return _(err); return fn(null, result); } }
function __future(fn, args, i) { var done, err, result; var cb = function(e, r) { done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r) { cb(e, r); }; fn.apply(this, args); return function(_) { if (done) _.call(this, err, result); else cb = _.bind(this); }.bind(this); }
function __nt(_, fn) { var i = 0; var cb = __cb(_, fn); var safeCb = function() { try { cb(); } catch (ex) { __propagate(cb, ex); } }; if (typeof process != "undefined" && typeof process.nextTick == "function") return function() { if (++i % 20 == 0) process.nextTick(safeCb); else cb(); }; else return function() { if (++i % 20 == 0) setTimeout(safeCb); else cb(); }; }
function __propagate(_, err) { try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err) { if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
var fs = require("fs");
var fspath = require("path");
var uuid = require("streamline/lib/util//uuid");
var flows = require("streamline/lib/util/flows");
var modulesDir;
var each = flows.each;
var dependencies = {
};
var commentsRE = /(\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\/)|(\/\/.*)/g;
var requireRE = /require\s*\(('|")([\w\W]*?)('|")\)/gm;
var funnel = flows.funnel(1);
function _exists(callback, path) {
  fspath.exists(path, function __1(result) {
    return callback(null, result);
  });
};
function _findModulesDir(_) {
  if (!_) {
    return __future(_findModulesDir, arguments, 0);
  }
;
  var __then = _;
  if (modulesDir) {
    return _(null, modulesDir)
  };
  var dir = __dirname;
  var __2 = false;
  return function(__break) {
    var __loop = __nt(_, function() {
      var __then = __loop;
      if (__2) {
        dir = dir.substring(0, dir.lastIndexOf("/"));
      }
       else {
        __2 = true;
      }
    ;
      if ((dir.length > 0)) {
        return _exists(__cb(_, function(__0, __1) {
          if (__1) {
            modulesDir = (dir + "/node_modules");
            return _(null, modulesDir);
          }
        ;
          return __then();
        }), (dir + "/node_modules"));
      }
       else {
        return __break();
      }
    ;
    });
    return __loop();
  }(function() {
    return _(new Error("cannot resolve module: node_modules not found"));
  });
};
function _combine(path, rel) {
  var cut = path.lastIndexOf("/");
  if ((cut <= 0)) {
    throw new Error(("too many parent dirs" + rel))
  };
  path = path.substring(0, cut);
  while ((rel.indexOf("./.") == 0)) {
    rel = rel.substring(2);;
  };
  if ((rel.indexOf("../") == 0)) {
    return _combine(path, rel.substring(1))
  };
  if ((rel.indexOf("./") != 0)) {
    return ((modulesDir + "/") + rel)
  };
  return (path + rel.substring(1));
};
var _etag = uuid.generate();
var _watched = {
};
function _watcher(stats) {
  funnel(null, function __1() {
    _etag = uuid.generate();
    Object.keys(_watched).forEach(function __1(path) {
      fs.unwatchFile(path);
    });
    _watched = {
    };
    dependencies = {
    };
  });
};
exports.etag = function __1() {
  return ("" + _etag);
};
function _watch(file) {
  if (!_watched[file]) {
    _watched[file] = true;
    fs.watchFile(file, _watcher);
  }
;
};
function _loadFile(_, path) {
  if (!_) {
    return __future(_loadFile, arguments, 0);
  }
;
  var __then = _;
  var js = (path + ".js");
  var js_ = (path + "_.js");
  return _exists(__cb(_, function(__0, __1) {
    if (__1) {
      _watch(js_);
      return require("streamline/lib/compile").loadFile(_, path);
    }
     else {
      return _exists(__cb(_, function(__0, __3) {
        if (__3) {
          _watch(js);
          return fs.readFile(js, "utf8", _);
        }
         else {
          return _(new Error(("invalid require path: " + path)));
        }
      ;
      }), js);
    }
  ;
  }), js_);
};
function _extendPath(_, path) {
  if (!_) {
    return __future(_extendPath, arguments, 0);
  }
;
  var __then = _;
  return function(__then) {
    return function __1(_) {
      if (!_) {
        return __future(__1, arguments, 0);
      }
    ;
      var __then = _;
      return function __1(_) {
        if (!_) {
          return __future(__1, arguments, 0);
        }
      ;
        var __then = _;
        return _exists(__cb(_, function(__0, __1) {
          var __val = !__1;
          if ((!__val == true)) {
            return _(null, __val);
          }
        ;
          return _exists(_, path);
        }), (path + ".js"));
      }(__cb(_, function(__0, __val) {
        if ((!__val == true)) {
          return _(null, __val);
        }
      ;
        return fs.stat(path, __cb(_, function(__0, __2) {
          return _(null, __2.isDirectory());
        }));
      }));
    }(__cb(_, function(__0, __2) {
      if (__2) {
        return _exists(__cb(_, function(__0, __1) {
          if (__1) {
            return _(null, (path + "/main"));
          }
           else {
            return _exists(__cb(_, function(__0, __2) {
              if (__2) {
                return _(null, (path + "/index"));
              }
            ;
              return __then();
            }), (path + "/index.js"));
          }
        ;
        }), (path + "/main.js"));
      }
    ;
      return __then();
    }));
  }(function() {
    return _(null, path);
  });
};
function _directDependencies(_, path) {
  if (!_) {
    return __future(_directDependencies, arguments, 0);
  }
;
  var __then = _;
  if (dependencies[path]) {
    return _(null, dependencies[path])
  };
  return _findModulesDir(__cb(_, function() {
    var result = [];
    dependencies[path] = result;
    return _loadFile(__cb(_, function(__0, str) {
      str = str.replace(commentsRE, "");
      var match;
      while (match = requireRE.exec(str)) {
        result.push(_combine(path, match[2]));;
      };
      return _(null, result);
    }), path);
  }));
};
function _missingDependencies(_, path, known) {
  if (!_) {
    return __future(_missingDependencies, arguments, 0);
  }
;
  var __then = _;
  var knownMap = {
  };
  known.forEach(function __1(key) {
    knownMap[key] = true;
  });
  function _explore(_, path, missingMap) {
    if (!_) {
      return __future(_explore, arguments, 0);
    }
  ;
    var __then = _;
    return _extendPath(__cb(_, function(__0, __2) {
      path = __2;
      if (knownMap[path]) {
        return _(null)
      };
      if (missingMap) {
        missingMap[path] = true;
      };
      knownMap[path] = true;
      return _directDependencies(__cb(_, function(__0, dependencies) {
        return each(__cb(_, __then), dependencies, function __1(_, dependency) {
          if (!_) {
            return __future(__1, arguments, 0);
          }
        ;
          var __then = _;
          return _explore(__cb(_, __then), dependency, missingMap);
        });
      }), path);
    }), path);
  };
  var missingMap = {
  };
  return each(__cb(_, function() {
    return _explore(__cb(_, function() {
      return _(null, Object.keys(missingMap));
    }), path, missingMap);
  }), known, function __2(_, cur) {
    if (!_) {
      return __future(__2, arguments, 0);
    }
  ;
    var __then = _;
    return _explore(__cb(_, __then), cur, null);
  });
};
exports.directDependencies = function __2(_, path) {
  if (!_) {
    return __future(__2, arguments, 0);
  }
;
  var __then = _;
  return funnel(_, function __1(_) {
    if (!_) {
      return __future(__1, arguments, 0);
    }
  ;
    var __then = _;
    return _directDependencies(_, path);
  });
};
exports.missingDependencies = function __3(_, path, known) {
  if (!_) {
    return __future(__3, arguments, 0);
  }
;
  var __then = _;
  return funnel(_, function __1(_) {
    if (!_) {
      return __future(__1, arguments, 0);
    }
  ;
    var __then = _;
    return _missingDependencies(_, path, known);
  });
};