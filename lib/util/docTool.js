/*** Generated by streamline 0.1.22 - DO NOT EDIT ***/

var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn) { var ctx = __global.__context; return function(err, result) { __global.__context = ctx; if (err) return _(err); try { return fn(null, result); } catch (ex) { return __propagate(_, ex); } } }
function __future(fn, args, i) { var done, err, result; var cb = function(e, r) { done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r) { cb(e, r); }; fn.apply(this, args); return function(_) { if (done) _.call(this, err, result); else cb = _.bind(this); }.bind(this); }
function __nt(_, fn) { var i = 0; var cb = __cb(_, fn); var safeCb = function() { try { cb(); } catch (ex) { __propagate(cb, ex); } }; if (typeof process != "undefined" && typeof process.nextTick == "function") return function() { if (++i % 20 == 0) process.nextTick(safeCb); else cb(); }; else return function() { if (++i % 20 == 0) setTimeout(safeCb); else cb(); }; }
function __propagate(_, err) { try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err) { if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
(function(_) {
  var __then = (_ = (_ || __trap));
  var fs = require("fs");
  var fsp = require("path");
  exports.generate = function __1(_, path, options) {
    if (!_) {
      return __future(__1, arguments, 0);
    }
  ;
    var __then = _;
    options = (options || {
    });
    function _generate(_, path) {
      if (!_) {
        return __future(_generate, arguments, 0);
      }
    ;
      var __then = _;
      var doc;
      return fs.stat(path, __cb(_, function(__0, stat) {
        if (stat.isFile()) {
          return function(__then) {
            if ((path.indexOf(".js") == (path.length - 3))) {
              var inside;
              return fs.readFile(path, "utf8", __cb(_, function(__0, __4) {
                doc = __4.split("\n").map(function __1(line) {
                  var i = line.indexOf(("//" + "/ "));
                  line = ((i >= 0) ? line.substring((i + 4)) : null);
                  if ((line === "!doc")) {
                    inside = true;
                  }
                   else if ((line === "!nodoc")) {
                    inside = false;
                  }
                   else return ((inside && (line != null)) ? (line + "\n") : null)
                  
                ;
                }).filter(function __2(line) {
                  return (line != null);
                }).join("");
                return _(null, (doc || ""));
              }));
            }
          ;
            return __then();
          }(function() {
            return _(null, "");
          });
        }
         else {
          if (stat.isDirectory()) {
            var pair = path.split("/node_modules/");
            var isPackage = (pair[1] && (pair[1].indexOf("/") < 0));
            doc = "";
            return fs.readdir(path, __cb(_, function(__0, files) {
              var i = 0;
              var __7 = false;
              return function(__break) {
                var __loop = __nt(_, function() {
                  var __then = __loop;
                  if (__7) {
                    i++;
                  }
                   else {
                    __7 = true;
                  }
                ;
                  if ((i < files.length)) {
                    return _generate(__cb(_, function(__0, __6) {
                      doc += __6;
                      return __then();
                    }), ((path + "/") + files[i]));
                  }
                   else {
                    return __break();
                  }
                ;
                });
                return __loop();
              }(function() {
                return function(__then) {
                  if ((isPackage && doc)) {
                    return fs.writeFile((path + "/API.md"), doc, "utf8", __cb(_, function() {
                      if (options.verbose) {
                        console.log((("generated " + path) + "/API.md"));
                      };
                      doc = "";
                      return __then();
                    }));
                  }
                ;
                  return __then();
                }(function() {
                  return _(null, doc);
                });
              });
            }));
          }
           else {
            return _(null, "");
          }
        ;
        }
      ;
      }));
    };
    return _generate(__cb(_, __then), path);
  };
  if ((process.argv[1] && (process.argv[1].indexOf("/docTool") >= 0))) {
    return exports.generate(__cb(_, __then), fsp.join(process.cwd(), (process.argv[2] || ".")), {
      verbose: true
    });
  }
;
  return __then();
})();