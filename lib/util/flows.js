/*** Generated by streamline 0.1.36-stack - DO NOT EDIT ***/
var __global = typeof global !== 'undefined' ? global : window;var __srcName='./lib/util/flows_.js';function __Frame(line, name){ this.line = line; this.name = name; this.prev = __global.__frame; __global.__frame = this; };__Frame.prototype.file = __srcName;__Frame.prototype.err = function(_, e){e.__frame = e.__frame || this.prev;__global.__frame = this;__propagate(_, e);};
function __cb(_, frame, offset, col, fn){ var ctx = __global.__context; frame.offset = offset; frame.col = col; return function ___(err, result){ __global.__frame = frame; __global.__context = ctx; if (err) { err.__frame = err.__frame || frame; return _(err); } try { return fn(null, result); } catch (ex) { ex.__frame = ex.__frame || frame; return __propagate(_, ex); } } }
function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function ___(e, r){ cb(e, r); }; fn.apply(this, args); return function ___(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); }
function __nt(_, frame, fn){ var i = 0; var cb = __cb(_, frame, 0, 0, fn); var safeCb = function ___(){ try { cb(); } catch (ex) { __propagate(cb, ex); } }; if (typeof process != "undefined" && typeof process.nextTick == "function") return function ___(){ if (++i % 20 == 0) process.nextTick(safeCb); else cb(); }; else return function ___(){ if (++i % 20 == 0) setTimeout(safeCb); else cb(); }; }
function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err){ if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
function __forIn(object){ var array = []; for (var obj in object) { array.push(obj); } return array; }
(function(exports) {
  "use strict";
  exports.each = function Object$each(_, array, fn, thisObj) {
    if (!_) {
      return __future(Object$each, arguments, 0);
    }
  ;
    var __frame = new __Frame(44, "Object$each");
    try {
      var len, i;
      if ((!array || !array.length)) {
        return _(null);
      }
    ;
      len = array.length;
      i = 0;
      var __2 = false;
      return (function ___(__break) {
        var __loop = __nt(_, __frame, function __$Object$each() {
          if (__2) {
            i++;
          }
           else {
            __2 = true;
          }
        ;
          var __1 = (i < len);
          if (__1) {
            return fn.call(thisObj, __cb(_, __frame, 5, 3, __loop), array[i], i);
          }
           else {
            __break();
          }
        ;
        });
        __loop();
      })(function __$Object$each() {
        return _(null, array);
      });
    } catch (e) {
      __frame.err(_, e);
    };
  };
  exports.map = function Object$map(_, array, fn, thisObj) {
    if (!_) {
      return __future(Object$map, arguments, 0);
    }
  ;
    var __frame = new __Frame(55, "Object$map");
    try {
      var result, len, i;
      if (!array) {
        return _(null, array);
      }
    ;
      result = [];
      len = array.length;
      i = 0;
      var __3 = false;
      return (function ___(__break) {
        var __loop = __nt(_, __frame, function __$Object$map() {
          if (__3) {
            i++;
          }
           else {
            __3 = true;
          }
        ;
          var __2 = (i < len);
          if (__2) {
            return fn.call(thisObj, __cb(_, __frame, 6, 15, function ___(__0, __1) {
              result[i] = __1;
              __loop();
            }), array[i], i);
          }
           else {
            __break();
          }
        ;
        });
        __loop();
      })(function __$Object$map() {
        return _(null, result);
      });
    } catch (e) {
      __frame.err(_, e);
    };
  };
  exports.filter = function Object$filter(_, array, fn, thisObj) {
    if (!_) {
      return __future(Object$filter, arguments, 0);
    }
  ;
    var __frame = new __Frame(67, "Object$filter");
    try {
      var result, len, i, elt;
      if (!array) {
        return _(null, array);
      }
    ;
      result = [];
      len = array.length;
      i = 0;
      var __3 = false;
      return (function ___(__break) {
        var __loop = __nt(_, __frame, function __$Object$filter() {
          if (__3) {
            i++;
          }
           else {
            __3 = true;
          }
        ;
          var __2 = (i < len);
          if (__2) {
            elt = array[i];
            return fn.call(thisObj, __cb(_, __frame, 7, 7, function ___(__0, __1) {
              return (function __$Object$filter(__then) {
                if (__1) {
                  result.push(elt);
                  __then();
                }
                 else {
                  __then();
                }
              ;
              })(__loop);
            }), elt);
          }
           else {
            __break();
          }
        ;
        });
        __loop();
      })(function __$Object$filter() {
        return _(null, result);
      });
    } catch (e) {
      __frame.err(_, e);
    };
  };
  exports.every = function Object$every(_, array, fn, thisObj) {
    if (!_) {
      return __future(Object$every, arguments, 0);
    }
  ;
    var __frame = new __Frame(82, "Object$every");
    try {
      var len, i;
      if (!array) {
        return _(null);
      }
    ;
      len = array.length;
      i = 0;
      var __4 = false;
      return (function ___(__break) {
        var __loop = __nt(_, __frame, function __$Object$every() {
          if (__4) {
            i++;
          }
           else {
            __4 = true;
          }
        ;
          var __3 = (i < len);
          if (__3) {
            return fn.call(thisObj, __cb(_, __frame, 5, 8, function ___(__0, __2) {
              var __1 = !__2;
              return (function __$Object$every(__then) {
                if (__1) {
                  return _(null, false);
                }
                 else {
                  __then();
                }
              ;
              })(__loop);
            }), array[i]);
          }
           else {
            __break();
          }
        ;
        });
        __loop();
      })(function __$Object$every() {
        return _(null, true);
      });
    } catch (e) {
      __frame.err(_, e);
    };
  };
  exports.some = function Object$some(_, array, fn, thisObj) {
    if (!_) {
      return __future(Object$some, arguments, 0);
    }
  ;
    var __frame = new __Frame(95, "Object$some");
    try {
      var len, i;
      if (!array) {
        return _(null);
      }
    ;
      len = array.length;
      i = 0;
      var __3 = false;
      return (function ___(__break) {
        var __loop = __nt(_, __frame, function __$Object$some() {
          if (__3) {
            i++;
          }
           else {
            __3 = true;
          }
        ;
          var __2 = (i < len);
          if (__2) {
            return fn.call(thisObj, __cb(_, __frame, 5, 7, function ___(__0, __1) {
              return (function __$Object$some(__then) {
                if (__1) {
                  return _(null, true);
                }
                 else {
                  __then();
                }
              ;
              })(__loop);
            }), array[i]);
          }
           else {
            __break();
          }
        ;
        });
        __loop();
      })(function __$Object$some() {
        return _(null, false);
      });
    } catch (e) {
      __frame.err(_, e);
    };
  };
  exports.reduce = function Object$reduce(_, array, fn, v, thisObj) {
    if (!_) {
      return __future(Object$reduce, arguments, 0);
    }
  ;
    var __frame = new __Frame(108, "Object$reduce");
    try {
      var len, i;
      if (!array) {
        return _(null, v);
      }
    ;
      len = array.length;
      i = 0;
      var __3 = false;
      return (function ___(__break) {
        var __loop = __nt(_, __frame, function __$Object$reduce() {
          if (__3) {
            i++;
          }
           else {
            __3 = true;
          }
        ;
          var __2 = (i < len);
          if (__2) {
            return fn.call(thisObj, __cb(_, __frame, 5, 7, function ___(__0, __1) {
              v = __1;
              __loop();
            }), v, array[i], i, array);
          }
           else {
            __break();
          }
        ;
        });
        __loop();
      })(function __$Object$reduce() {
        return _(null, v);
      });
    } catch (e) {
      __frame.err(_, e);
    };
  };
  exports.reduceRight = function Object$reduceRight(_, array, fn, v, thisObj) {
    if (!_) {
      return __future(Object$reduceRight, arguments, 0);
    }
  ;
    var __frame = new __Frame(120, "Object$reduceRight");
    try {
      var len, i;
      if (!array) {
        return _(null, v);
      }
    ;
      len = array.length;
      i = (len - 1);
      var __3 = false;
      return (function ___(__break) {
        var __loop = __nt(_, __frame, function __$Object$reduceRight() {
          if (__3) {
            i--;
          }
           else {
            __3 = true;
          }
        ;
          var __2 = (i >= 0);
          if (__2) {
            return fn.call(thisObj, __cb(_, __frame, 5, 7, function ___(__0, __1) {
              v = __1;
              __loop();
            }), v, array[i], i, array);
          }
           else {
            __break();
          }
        ;
        });
        __loop();
      })(function __$Object$reduceRight() {
        return _(null, v);
      });
    } catch (e) {
      __frame.err(_, e);
    };
  };
  exports.eachKey = function Object$eachKey(_, obj, fn, thisObj) {
    if (!_) {
      return __future(Object$eachKey, arguments, 0);
    }
  ;
    var __frame = new __Frame(136, "Object$eachKey");
    try {
      var key;
      if (!obj) {
        return _(null, obj);
      }
    ;
      var __1 = __forIn(obj);
      var __2 = 0;
      return (function ___(__break) {
        var __loop = __nt(_, __frame, function __$Object$eachKey() {
          var __3 = (__2 < __1.length);
          if (__3) {
            key = __1[__2++];
            return (function __$Object$eachKey(__then) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) {
                return fn.call(thisObj, __cb(_, __frame, 5, 4, __then), key, obj[key]);
              }
               else {
                __then();
              }
            ;
            })(__loop);
          }
           else {
            __break();
          }
        ;
        });
        __loop();
      })(function __$Object$eachKey() {
        return _(null, obj);
      });
    } catch (e) {
      __frame.err(_, e);
    };
  };
  exports.spray = function(fns, max) {
    return new function() {
      var funnel = exports.funnel(max);
      this.collect = function(callback, count, trim) {
        if ((typeof (callback) != "function")) {
          throw new Error("invalid call to collect: no callback")
        };
        var results = (trim ? [] : new Array(fns.length));
        count = ((count < 0) ? fns.length : Math.min(count, fns.length));
        if ((count == 0)) {
          return callback(null, results)
        };
        var collected = 0;
        for (var i = 0; (i < fns.length); i++) {
          (function(i) {
            funnel(function(err, result) {
              if (err) {
                return callback(err)
              };
              if (trim) {
                results.push(result);
              } else {
                results[i] = result;
              };
              if ((++collected == count)) {
                return callback(null, results)
              };
            }, fns[i]);
          })(i);
        };
      };
      this.collectOne = function(callback) {
        return this.collect(function(err, result) {
          return callback(err, (result && result[0]));
        }, 1, true);
      };
      this.collectAll = function(callback) {
        return this.collect(callback, -1, false);
      };
    };
  };
  exports.funnel = function(max) {
    max = ((typeof max == "undefined") ? -1 : max);
    var queue = [];
    var active = 0;
    return function(callback, fn) {
      if ((max < 0)) {
        return fn(callback)
      };
      queue.push({
        fn: fn,
        cb: callback
      });
      function _doOne() {
        var current = queue.splice(0, 1)[0];
        if (!current.cb) {
          return current.fn()
        };
        active++;
        current.fn(function(err, result) {
          active--;
          current.cb(err, result);
          while (((active < max) && (queue.length > 0))) {
            _doOne();;
          };
        });
      };
      while (((active < max) && (queue.length > 0))) {
        _doOne();;
      };
    };
  };
  exports.collect = function Object$collect(_, futures) {
    if (!_) {
      return __future(Object$collect, arguments, 0);
    }
  ;
    var __frame = new __Frame(237, "Object$collect");
    try {
      return exports.map(__cb(_, __frame, 1, 9, _), futures, function __1(_, future) {
        if (!_) {
          return __future(__1, arguments, 0);
        }
      ;
        var __frame = new __Frame(238, "__1");
        try {
          return future(__cb(_, __frame, 1, 10, _));
        } catch (e) {
          __frame.err(_, e);
        };
      });
    } catch (e) {
      __frame.err(_, e);
    };
  };
  exports.setContext = function(ctx) {
    var old = __global.__context;
    __global.__context = ctx;
    return old;
  };
  exports.getContext = function() {
    return __global.__context;
  };
  exports.nextTick = (((typeof process === "object") && (typeof process.nextTick === "function")) ? process.nextTick : function(callback) {
    setTimeout(function() {
      callback();
    }, 0);
  });
  exports.apply = function apply(callback, fn, thisObj, args, index) {
    if ((callback == null)) {
      return __future(apply, arguments, 0)
    };
    args.splice(((index != null) ? index : args.length), 0, callback);
    return fn.apply(thisObj, args);
  };
  exports.stackTrace = function(err) {
    var s = "", f, end;
    if (err.stack) {
      s = err.stack.substring(0, err.stack.indexOf("__$"));
      s = s.substring(0, (s.lastIndexOf("\n") + 1));
      for (var f = err.__frame; f; f = f.prev) {
        s += (((((((("    at " + f.name) + " (") + f.file) + ":") + ((f.line + f.offset))) + ":") + f.col) + ")\n");
      };
    }
  ;
    return s;
  };
})(((typeof exports !== "undefined") ? exports : (window.StreamlineFlows = (window.StreamlineFlows || {
}))));