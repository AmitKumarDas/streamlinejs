/*** Generated by streamline 0.1.36-stack - DO NOT EDIT ***/
var __global = typeof global !== 'undefined' ? global : window;var __srcName='./lib/compiler/compile_.js';
function __cb(_, frame, line, col, fn){ var ctx = __global.__context; frame.line = line; frame.col = col; return function ___(err, result){ __global.__frame = frame; __global.__context = ctx; if (err) { err.__frame = err.__frame || frame; return _(err); } try { return fn(null, result); } catch (ex) { ex.__frame = ex.__frame || frame; return __propagate(_, ex); } } }
function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function ___(e, r){ cb(e, r); }; fn.apply(this, args); return function ___(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); }
function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err){ if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
function __tryCatch(_, fn){ try { fn(); } catch (e) { try { _(e); } catch (ex) { __trap(ex); } } }
var fs = require("fs");
var fspath = require("path");
var transform = require("./transform");
var flows = require("../util/flows");
function _exists(callback, fname) {
  fspath.exists(fname, function(result) {
    callback(null, result);
  });
};
function _mkdir(dir, mode, _) {
  if (!_) {
    return __future(_mkdir, arguments, 2);
  }
;
  var __frame = __global.__frame = {
    file: __srcName,
    name: "_mkdir",
    prev: __global.__frame
  };
  try {
    var p;
    p = fspath.dirname(dir);
    return _exists(p, __cb(_, __frame, 23, 1, function ___(__0, __2) {
      var __1 = !__2;
      return (function __$_mkdir(__then) {
        if (__1) {
          return _mkdir(p, mode, __cb(_, __frame, 24, 1, __then));
        }
         else {
          __then();
        }
      ;
      })(function __$_mkdir() {
        return fs.mkdir(dir, mode, __cb(_, __frame, 25, 1, _));
      });
    }));
  } catch (e) {
    e.__frame = (e.__frame || __frame.prev);
    __global.__frame = __frame;
    return __propagate(_, e);
  };
};
function mtime(_, fname) {
  if (!_) {
    return __future(mtime, arguments, 0);
  }
;
  var __frame = __global.__frame = {
    file: __srcName,
    name: "mtime",
    prev: __global.__frame
  };
  try {
    return (function __$mtime(_) {
      return _exists(__cb(_, __frame, 29, 1, function ___(__0, __1) {
        var __2 = __1;
        return (function __$mtime(__then) {
          if (__2) {
            return fs.stat(fname, __cb(_, __frame, 29, 1, function ___(__0, __4) {
              var __3 = __4.mtime;
              return _(null, __3);
            }));
          }
           else {
            __then();
          }
        ;
        })(function __$mtime() {
          return _(null, 0);
        });
      }), fname);
    })(__cb(_, __frame, 8, 1, _));
  } catch (e) {
    e.__frame = (e.__frame || __frame.prev);
    __global.__frame = __frame;
    return __propagate(_, e);
  };
};
exports.loadFile = function Object$loadFile(_, path, options) {
  if (!_) {
    return __future(Object$loadFile, arguments, 0);
  }
;
  var __frame = __global.__frame = {
    file: __srcName,
    name: "Object$loadFile",
    prev: __global.__frame
  };
  try {
    var dontSave, js, js_, mtimejs, mtimejs_, banner, content, transformed;
    if ((path.substring((path.length - 3)) === ".js")) {
      path = path.substring(0, (path.length - 3));
    }
  ;
    options = (options || {
    });
    options.sourceName = path;
    dontSave = (path[(path.length - 1)] == "_");
    if (dontSave) {
      path = path.substring(0, (path.length - 1));
      options.lines = (options.lines || "preserve");
    }
     else {
      options.lines = (options.lines || "mark");
    }
  ;
    js = (path + ".js");
    js_ = (path + "_.js");
    return mtime(__cb(_, __frame, 60, 1, function ___(__0, __2) {
      mtimejs = __2;
      return mtime(__cb(_, __frame, 61, 1, function ___(__0, __3) {
        mtimejs_ = __3;
        banner = transform.banner();
        return (function __$Object$loadFile(__then) {
          if (mtimejs_) {
            return fs.readFile(js_, "utf8", __cb(_, __frame, 66, 1, function ___(__0, __4) {
              content = __4;
              return (function __$Object$loadFile(_) {
                var __1 = mtimejs;
                if (!__1) {
                  return _(null, __1);
                }
              ;
                return fs.readFile(js, "utf8", __cb(_, __frame, 67, 1, _));
              })(__cb(_, __frame, 8, 1, function ___(__0, __5) {
                transformed = __5;
                if ((((transformed && (mtimejs_ < mtimejs)) && (transformed.substring(0, banner.length) == banner)) && !options.force)) {
                  return _(null, transformed);
                }
              ;
                if (options.verbose) {
                  console.log(("streamline: transforming: " + js_));
                }
              ;
                transformed = (banner + transform.transform(content, options));
                return (function __$Object$loadFile(__then) {
                  if (!dontSave) {
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$Object$loadFile() {
                          return fs.writeFile(js, transformed, "utf8", __cb(_, __frame, 79, 1, __then));
                        });
                      })(function ___(ex, __result) {
                        __tryCatch(_, function __$Object$loadFile() {
                          if (ex) {
                            __then();
                          }
                           else {
                            _(null, __result);
                          }
                        ;
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, __then);
                    });
                  }
                   else {
                    __then();
                  }
                ;
                })(function __$Object$loadFile() {
                  return _(null, transformed);
                });
              }));
            }));
          }
           else {
            return fs.readFile(js, "utf8", __cb(_, __frame, 87, 1, _));
          }
        ;
        })(_);
      }), js_);
    }), js);
  } catch (e) {
    e.__frame = (e.__frame || __frame.prev);
    __global.__frame = __frame;
    return __propagate(_, e);
  };
};
function mtimeSync(fname) {
  try {
    return fs.statSync(fname).mtime;
  } catch (ex) {
    return 0;
  };
};
exports.loadFileSync = function(path, options) {
  if ((path.substring((path.length - 3)) === ".js")) {
    path = path.substring(0, (path.length - 3));
  };
  options = (options || {
  });
  options.sourceName = path;
  var dontSave = (path[(path.length - 1)] == "_");
  if (dontSave) {
    path = path.substring(0, (path.length - 1));
    options.lines = (options.lines || "preserve");
  }
   else {
    options.lines = (options.lines || "mark");
  }
;
  var js = (path + ".js");
  var js_ = (path + "_.js");
  var mtimejs = mtimeSync(js);
  var mtimejs_ = mtimeSync(js_);
  var banner = transform.banner();
  if (mtimejs_) {
    var content = fs.readFileSync(js_, "utf8");
    var transformed = (mtimejs && fs.readFileSync(js, "utf8"));
    if ((((transformed && (mtimejs_ < mtimejs)) && (transformed.substring(0, banner.length) == banner)) && !options.force)) {
      return transformed
    };
    if (options.verbose) {
      console.log(("streamline: transforming: " + js_));
    };
    var transformed = (banner + transform.transform(content, options));
    if (!dontSave) {
      try {
        fs.writeFileSync(js, transformed, "utf8");
      } catch (ex) {
      
      };
    }
  ;
    return transformed;
  }
   else {
    return fs.readFileSync(js, "utf8");
  }
;
};
exports.compile = function Object$compile(_, paths, options) {
  if (!_) {
    return __future(Object$compile, arguments, 0);
  }
;
  var __frame = __global.__frame = {
    file: __srcName,
    name: "Object$compile",
    prev: __global.__frame
  };
  try {
    var failed, cwd;
    function _compile(_, path, options) {
      if (!_) {
        return __future(_compile, arguments, 0);
      }
    ;
      var __frame = __global.__frame = {
        file: __srcName,
        name: "_compile",
        prev: __global.__frame
      };
      try {
        var stat, js;
        return fs.stat(path, __cb(_, __frame, 158, 1, function ___(__0, __2) {
          stat = __2;
          return (function __$_compile(__then) {
            if (stat.isDirectory()) {
              return fs.readdir(path, __cb(_, __frame, 160, 1, function ___(__0, __3) {
                return flows.each(__cb(_, __frame, 160, 1, __then), __3, function __1(_, f) {
                  if (!_) {
                    return __future(__1, arguments, 0);
                  }
                ;
                  var __frame = __global.__frame = {
                    file: __srcName,
                    name: "__1",
                    prev: __global.__frame
                  };
                  try {
                    return _compile(__cb(_, __frame, 161, 1, _), ((path + "/") + f), options);
                  } catch (e) {
                    e.__frame = (e.__frame || __frame.prev);
                    __global.__frame = __frame;
                    return __propagate(_, e);
                  };
                });
              }));
            }
             else {
              return (function __$_compile(__then) {
                if ((stat.isFile() && path.match(/_\.js$/))) {
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$_compile() {
                        js = (path.substring(0, (path.length - 4)) + ".js");
                        return exports.loadFile(__cb(_, __frame, 166, 1, __then), js, options);
                      });
                    })(function ___(ex, __result) {
                      __tryCatch(_, function __$_compile() {
                        if (ex) {
                          console.error(ex.message);
                          failed++;
                          __then();
                        }
                         else {
                          _(null, __result);
                        }
                      ;
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, __then);
                  });
                }
                 else {
                  __then();
                }
              ;
              })(__then);
            }
          ;
          })(_);
        }));
      } catch (e) {
        e.__frame = (e.__frame || __frame.prev);
        __global.__frame = __frame;
        return __propagate(_, e);
      };
    };
    failed = 0;
    options = (options || {
    });
    if (options.verbose) {
      console.log(("transform version: " + transform.version));
    }
  ;
    if ((!paths || (paths.length == 0))) {
      return _(new Error("cannot compile: no files specified"));
    }
  ;
    cwd = process.cwd;
    return flows.each(__cb(_, __frame, 182, 1, function __$Object$compile() {
      if (failed) {
        return _(new Error((("errors found in " + failed) + " files")));
      }
    ;
      _();
    }), paths, function __1(_, path) {
      if (!_) {
        return __future(__1, arguments, 0);
      }
    ;
      var __frame = __global.__frame = {
        file: __srcName,
        name: "__1",
        prev: __global.__frame
      };
      try {
        return _compile(__cb(_, __frame, 183, 1, _), fspath.join(cwd, path), options);
      } catch (e) {
        e.__frame = (e.__frame || __frame.prev);
        __global.__frame = __frame;
        return __propagate(_, e);
      };
    });
  } catch (e) {
    e.__frame = (e.__frame || __frame.prev);
    __global.__frame = __frame;
    return __propagate(_, e);
  };
};