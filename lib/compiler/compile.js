/*** Generated by streamline 0.1.45 - DO NOT EDIT ***/ "use strict"; var __g=typeof global!=='undefined'?global:window;__g=(__g.__streamline||(__g.__streamline={}));__g.setEF=__g.setEF||function(e,f){e.__frame = e.__frame||f};var __srcName='streamline/lib/compiler/compile_.js'; function __func(_, __this, __arguments, fn, index, frame, body){ if (!_) { return __future.call(__this, fn, __arguments, index); } frame.file = __srcName; frame.prev = __g.frame; __g.frame = frame; try { body(); } catch (e) { __g.setEF(e, frame.prev); __propagate(_, e); } finally { __g.frame = frame.prev; } } function __cb(_, frame, offset, col, fn){ frame.offset = offset; frame.col = col; var ctx = __g.context; return function ___(err, result){ var oldFrame = __g.frame; __g.frame = frame; __g.context = ctx; try { if (err) { __g.setEF(err, frame); return _(err); } return fn(null, result); } catch (ex) { __g.setEF(ex, frame); return __propagate(_, ex); } finally { __g.frame = oldFrame; } } } function __future(fn, args, i){ var err, result, done, q = []; args = Array.prototype.slice.call(args); args[i] = function(e, r){ err = e, result = r, done = true; q && q.forEach(function(f){ try { f(e, r); } catch (ex) { __trap(ex); } }); q = null; }; fn.apply(this, args); return function ___(_){ if (done) _(err, result); else q.push(_); }.bind(this);} function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } } function __trap(err){ if (err) { if (__g.context && __g.context.errorHandler) __g.context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } } function __tryCatch(_, fn){ try { fn(); } catch (e) { try { _(e); } catch (ex) { __trap(ex); } } } var fs = require("fs");









var fspath = require("path");
var transform = require("./transform");

function _exists(callback, fname) {
 fspath.exists(fname, function(result) {
 callback(null, result); });};



function _mkdir(dir, mode, _) { var p; var __frame = { name: "_mkdir", line: 20 }; return __func(_, this, arguments, _mkdir, 2, __frame, function __$_mkdir() {
 p = fspath.dirname(dir);
 return _exists(p, __cb(_, __frame, 2, 6, function ___(__0, __2) { var __1 = !__2; return (function __$_mkdir(__then) { if (__1) {
 return _mkdir(p, mode, __cb(_, __frame, 3, 2, __then)); } else { __then(); } ; })(function __$_mkdir() {
 return fs.mkdir(dir, mode, __cb(_, __frame, 4, 1, _)); }); })); });};


function mtime(_, fname) { var __frame = { name: "mtime", line: 27 }; return __func(_, this, arguments, mtime, 0, __frame, function __$mtime() { return (function __$mtime(_) {
 return _exists(__cb(_, __frame, 1, 8, function ___(__0, __1) { var __2 = __1; return (function __$mtime(__then) { if (__2) { return fs.stat(fname, __cb(_, __frame, 1, 28, function ___(__0, __4) { var __3 = __4.mtime; return _(null, __3); })); } else { __then(); } ; })(function __$mtime() { return _(null, 0); }); }), fname); })(__cb(_, __frame, -26, 22, _)); });};

function parseShebang(content) {
 if (((content[0] === "#") && (content[1] === "!"))) {
 var n = content.indexOf("\n");
 var le = "\n";
 if ((n != -1)) {
 var shebang = content.substr(0, n);
 if ((shebang[(shebang.length - 1)] == "\r")) {
 le = "\r\n";
 shebang = shebang.substr(0, (shebang.length - 1)); } ;

 content = content.substr((n + 1));
 return [shebang,content,le,]; } ; };


 return ["",content,"",];};













exports.loadFile = function exports_loadFile__1(_, path, options) { var ext, basename, dirname, js, js_, dontSave, mtimejs, mtimejs_, banner, content, shebangparse, shebang, le, transformed; var __frame = { name: "exports_loadFile__1", line: 58 }; return __func(_, this, arguments, exports_loadFile__1, 0, __frame, function __$exports_loadFile__1() {
 options = (options || { });

 ext = fspath.extname(path);
 basename = fspath.basename(path, ext);
 dirname = fspath.dirname(path);
 if ((ext !== ".js")) { return _(null); } ;


 dontSave = (basename[(basename.length - 1)] == "_");
 if (dontSave) {

 js = (((dirname + "/") + basename.substr(0, (basename.length - 1))) + ext);
 js_ = path;
 options.lines = (options.lines || "preserve"); }

 else {
 js = path;
 js_ = ((((dirname + "/") + basename) + "_") + ext);
 options.lines = (options.lines || "mark"); } ;



 return mtime(__cb(_, __frame, 23, 15, function ___(__0, __2) { mtimejs = __2;
 return mtime(__cb(_, __frame, 24, 16, function ___(__0, __3) { mtimejs_ = __3;

 banner = transform.banner(); return (function __$exports_loadFile__1(__then) {
 if (mtimejs_) {
 options.sourceName = js_;
 return fs.readFile(js_, "utf8", __cb(_, __frame, 29, 16, function ___(__0, __4) { content = __4;
 shebangparse = parseShebang(content);
 shebang = shebangparse[0];
 le = shebangparse[2];
 content = shebangparse[1];

 banner = ((shebang + le) + banner); return (function __$exports_loadFile__1(_) {
 var __1 = mtimejs; if (!__1) { return _(null, __1); } ; return fs.readFile(js, "utf8", __cb(_, __frame, 36, 31, _)); })(__cb(_, __frame, -57, 22, function ___(__0, __5) { transformed = __5;
 if ((((transformed && (mtimejs_ < mtimejs)) && (transformed.substring(0, banner.length) == banner)) && !options.force)) {



 return _(null, transformed); } ;

 if (options.verbose) {
 console.log(((("streamline: transforming: " + js_) + " to ") + js)); } ;

 transformed = ((shebang + banner) + transform.transform(content, options));
 if (!dontSave) {

 try {
 fs.writeFile(js, transformed, "utf8");

 } catch (ex) {  }; } ;


 return _(null, transformed); })); })); } else {


 options.sourceName = js;
 return fs.readFile(js, "utf8", __cb(_, __frame, 59, 16, function ___(__0, __6) { content = __6;
 if (options.compileAnyways) {

 shebangparse = parseShebang(content);
 shebang = shebangparse[0];
 content = (shebangparse[2] + shebangparse[1]);
 return _(null, transform.transform(content, options)); }
 else {
 return _(null, content); } ; __then(); })); } ; })(_); }), js_); }), js); });};




function mtimeSync(fname) {
 try {
 return fs.statSync(fname).mtime;

 } catch (ex) {
 return 0; };};






exports.transformModule = function(content, path, options) {
 options = (options || { });

 var ext = fspath.extname(path);
 var basename = fspath.basename(path, ext);
 var dirname = fspath.dirname(path);

 var js, js_;

 var dontSave = (basename[(basename.length - 1)] == "_");
 if (dontSave) {
 path = path.substring(0, (path.length - 1));
 js = (((dirname + "/") + basename.substr((basename.length - 1))) + ext);
 js_ = path;
 options.lines = (options.lines || "preserve"); }

 else {
 js = path;
 js_ = ((((dirname + "/") + basename) + "_") + ext);
 options.lines = (options.lines || "mark"); };


 var mtimejs = mtimeSync(js);
 var mtimejs_ = mtimeSync(js_);

 var banner = transform.banner();

 if (mtimejs_) {
 options.sourceName = js_;
 if (!dontSave) {
 content = fs.readFileSync(js_, "utf8"); };
 var shebangparse = parseShebang(content);
 var shebang = shebangparse[0];
 var le = shebangparse[2];
 content = shebangparse[1];

 banner = ((shebang + le) + banner);
 var transformed = (mtimejs && fs.readFileSync(js, "utf8"));
 if ((((transformed && (mtimejs_ < mtimejs)) && (transformed.substring(0, banner.length) == banner)) && !options.force)) {



 return transformed };
 if (options.verbose) {
 console.log(("streamline: transforming: " + js_)); };
 var transformed = (banner + transform.transform(content, options));
 if (!dontSave) {

 try {
 fs.writeFileSync(js, transformed, "utf8");

 } catch (ex) {  }; } ;


 return transformed; }

 else {
 options.sourceName = path;
 if (options.compileAnyways) {

 var shebangparse = parseShebang(content);
 var shebang = shebangparse[0];
 content = (shebangparse[2] + shebangparse[1]);
 return transform.transform(content, options); }
 else {
 return content; } ; };};










exports.compile = function exports_compile__2(_, paths, options) { var flows, failed, cwd;


 function _compile(_, path, options) { var stat; var __frame = { name: "_compile", line: 221 }; return __func(_, this, arguments, _compile, 0, __frame, function __$_compile() {
 return fs.stat(path, __cb(_, __frame, 1, 13, function ___(__0, __2) { stat = __2; return (function __$_compile(__then) {
 if (stat.isDirectory()) {
 return fs.readdir(path, __cb(_, __frame, 3, 17, function ___(__0, __3) { return flows.each(__cb(_, __frame, 3, 3, __then), __3, function __1(_, f) { var __frame = { name: "__1", line: 224 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
 return _compile(__cb(_, __frame, 1, 4, _), ((path + "/") + f), options); }); }); })); } else { return (function __$_compile(__then) {

 if (stat.isFile()) { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$_compile() {

 return exports.loadFile(__cb(_, __frame, 8, 4, __then), path, options); }); })(function ___(ex, __result) { __tryCatch(_, function __$_compile() { if (ex) {

 console.error(ex.message);
 failed++; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, __then); }); } else { __then(); } ; })(__then); } ; })(_); })); }); }; var __frame = { name: "exports_compile__2", line: 218 }; return __func(_, this, arguments, exports_compile__2, 0, __frame, function __$exports_compile__2() { flows = require("../util/flows");





 failed = 0;
 options = (options || { });
 if (options.verbose) {
 console.log(("transform version: " + transform.version)); } ;
 if ((!paths || (paths.length == 0))) {
 return _(new Error("cannot compile: no files specified")); } ;
 cwd = process.cwd;
 return flows.each(__cb(_, __frame, 27, 1, function __$exports_compile__2() {


 if (failed) {
 return _(new Error((("errors found in " + failed) + " files"))); } ; _(); }), paths, function __1(_, path) { var __frame = { name: "__1", line: 245 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _compile(__cb(_, __frame, 1, 2, _), fspath.resolve(cwd, path), options); }); }); });};