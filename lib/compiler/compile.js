/*** Generated by streamline 0.2.5 - DO NOT EDIT ***/
"use strict";
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ var fs = require("fs");
/*    10 */ var fspath = require("path");
/*    12 */ function _exists(callback, fname) {
/*    13 */   fspath.exists(fname, function(result) {
/*    14 */     callback(null, result);
              });
            };
/*    18 */ function mtime(_, fname) {
              var __frame = {
                name: "mtime",
                line: 18
              };
              return __func(_, this, arguments, mtime, 0, __frame, function __$mtime() {
                return (function __$mtime(_) {
/*    19 */       return _exists(__cb(_, __frame, 1, 8, function ___(__0, __1) {
                    var __2 = __1;
                    return (function __$mtime(__then) {
                      if (__2) {
/*    19 */             return fs.stat(fname, __cb(_, __frame, 1, 28, function ___(__0, __4) {
/*    19 */               var __3 = __4.mtime;
                          return _(null, __3);
                        }, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(function __$mtime() {
/*    19 */           return _(null, 0);
                    });
/*    19 */       }, true), fname);
                })(__cb(_, __frame, -17, 6, _, true));
              });
            };
/*    22 */ function _getTransform(options) {
/*    23 */   if (options.fibers) {
/*    25 */     var req = require;
/*    26 */     return req("../fibers/transform");
              }
/*    27 */    else {
/*    28 */     return require("../callbacks/transform");
              }
            ;
            };
/*    32 */ function _banner(version) {
/*    34 */   return (("/*** Generated by streamline " + version) + " - DO NOT EDIT ***/");
            };
/*    37 */ function _extend(obj, other) {
/*    38 */   for (var i in other) {
/*    39 */     obj[i] = other[i];
              };
/*    41 */   return obj;
            };
/*    44 */ function _transform(transform, source, options) {
/*    45 */   var sourceOptions = /streamline\.options\s*=\s*(\{.*\})/.exec(source);
/*    46 */   if (sourceOptions) {
/*    47 */     _extend(options, JSON.parse(sourceOptions[1]));
              }
            ;
/*    49 */   source = source.replace(/\r\n/g, "\n");
/*    50 */   options.source = source;
/*    51 */   options.callback = (options.callback || "_");
/*    52 */   options.lines = (options.lines || "mark");
/*    53 */   return transform.transform(source, options);
            };
/*    56 */ function parseShebang(content) {
/*    57 */   if (((content[0] === "#") && (content[1] === "!"))) {
/*    58 */     var n = content.indexOf("\n");
/*    59 */     var le = "\n";
/*    60 */     if ((n != -1)) {
/*    61 */       var shebang = content.substr(0, n);
/*    62 */       if ((shebang[(shebang.length - 1)] == "\r")) {
/*    63 */         le = "\r\n";
/*    64 */         shebang = shebang.substr(0, (shebang.length - 1));
                  }
                ;
/*    66 */       content = content.substr((n + 1));
/*    67 */       return [shebang,content,le,];
                }
              ;
              }
            ;
/*    70 */   return ["",content,"",];
            };
/*    73 */ exports.compileFile = function exports_compileFile__1(_, js_, options) {
              var ext, language, basename, dirname, js, mtimejs_, mtimejs, transform, banner, content, shebangparse, shebang, le, coffee, transformed;
              var __frame = {
                name: "exports_compileFile__1",
                line: 73
              };
              return __func(_, this, arguments, exports_compileFile__1, 0, __frame, function __$exports_compileFile__1() {
/*    74 */     options = _extend({
/*    74 */     }, (options || {
                }));
/*    75 */     ext = fspath.extname(js_);
/*    76 */     language = ext.substring(2);
/*    77 */     basename = fspath.basename(js_, ext);
/*    78 */     dirname = fspath.dirname(js_);
/*    79 */     js = (((dirname + "/") + basename) + ".js");
/*    80 */     return mtime(__cb(_, __frame, 7, 16, function ___(__0, __2) {
                  mtimejs_ = __2;
/*    81 */       return mtime(__cb(_, __frame, 8, 15, function ___(__0, __3) {
                    mtimejs = __3;
/*    82 */         transform = _getTransform(options);
/*    84 */         banner = _banner(transform.version);
/*    85 */         options.sourceName = js_;
/*    86 */         return fs.readFile(js_, "utf8", __cb(_, __frame, 13, 15, function ___(__0, __4) {
                      content = __4;
/*    87 */           shebangparse = parseShebang(content);
/*    88 */           shebang = shebangparse[0];
/*    89 */           le = shebangparse[2];
/*    90 */           content = shebangparse[1];
/*    92 */           if ((language === "coffee")) {
/*    93 */             coffee = require("coffee-script");
/*    94 */             content = coffee.compile(content, {
/*    94 */               filename: js_
                        });
                      }
                    ;
/*    97 */           banner = ((shebang + le) + banner);
                      return (function __$exports_compileFile__1(_) {
/*    98 */             var __1 = mtimejs;
                        if (!__1) {
                          return _(null, __1);
                        }
                      ;
/*    98 */             return fs.readFile(js, "utf8", __cb(_, __frame, 25, 30, _, true));
                      })(__cb(_, __frame, -72, 6, function ___(__0, __5) {
                        transformed = __5;
/*    99 */             if ((((transformed && (mtimejs_ < mtimejs)) && (transformed.substring(0, banner.length) == banner)) && !options.force)) {
/*   100 */               return _(null, transformed);
                        }
                      ;
/*   102 */             if (options.verbose) {
/*   103 */               console.log(((("streamline: transforming: " + js_) + " to ") + js));
                        }
                      ;
/*   105 */             transformed = ((shebang + banner) + _transform(transform, content, options));
/*   106 */             if (((options.action === "compile") || !dontSave)) {
/*   108 */               try {
/*   109 */                 fs.writeFile(js, transformed, "utf8");
/*   110 */               } catch (ex) {
                          
                          };
                        }
                      ;
                        _();
                      }, true));
                    }, true));
/*    81 */       }, true), js);
/*    80 */     }, true), js_);
              });
            };
/*   114 */ var streamlineRE = /require\s*\(\s*['"]streamline\/module['"]\s*\)\s*\(\s*module\s*,?\s*([^)]*)?\s*\)/;
/*   127 */ exports.loadFile = function exports_loadFile__2(_, path, options) {
              var ext, basename, dirname, mtimejs, mtimejs_, dontSave, jsbase, js, js_, fiberjs, transform, banner, content, shebangparse, shebang, le, transformed, matches;
              var __frame = {
                name: "exports_loadFile__2",
                line: 127
              };
              return __func(_, this, arguments, exports_loadFile__2, 0, __frame, function __$exports_loadFile__2() {
/*   128 */     options = _extend({
/*   128 */     }, (options || {
                }));
/*   130 */     ext = fspath.extname(path);
                return (function __$exports_loadFile__2(__then) {
/*   131 */       if (((ext !== ".js") && (ext !== "._js"))) {
/*   133 */         return _exists(__cb(_, __frame, 6, 6, function ___(__0, __3) {
                      return (function __$exports_loadFile__2(__then) {
                        if (__3) {
/*   133 */               path = (path + (ext = "._js"));
                          __then();
                        }
                         else {
/*   134 */               return _exists(__cb(_, __frame, 7, 11, function ___(__0, __4) {
                            return (function __$exports_loadFile__2(__then) {
                              if (__4) {
/*   134 */                     path = (path + (ext = ".js"));
                                __then();
                              }
                               else {
                                return _(null);
                              }
                            ;
                            })(__then);
/*   134 */               }, true), (path + ".js"));
                        }
                      ;
                      })(__then);
/*   133 */         }, true), (path + "._js"));
                  }
                   else {
                    __then();
                  }
                ;
                })(function __$exports_loadFile__2() {
/*   137 */       basename = fspath.basename(path, ext);
/*   138 */       dirname = fspath.dirname(path);
/*   141 */       dontSave = (basename[(basename.length - 1)] == "_");
/*   142 */       jsbase = (dontSave ? basename.substr(0, (basename.length - 1)) : basename);
/*   143 */       js = (((dirname + "/") + jsbase) + ext);
/*   144 */       js_ = ((((dirname + "/") + jsbase) + "_") + ext);
/*   145 */       fiberjs = ((((dirname + "/") + jsbase) + "--fibers") + ext);
                  return (function __$exports_loadFile__2(_) {
/*   146 */         var __1 = options.fibers;
                    if (!__1) {
                      return _(null, __1);
                    }
                  ;
/*   146 */         return mtime(__cb(_, __frame, 19, 34, function ___(__0, __3) {
/*   146 */           var __2 = (mtimejs = __3);
                      return _(null, __2);
/*   146 */         }, true), fiberjs);
                  })(__cb(_, __frame, -126, 6, function ___(__0, __5) {
                    return (function __$exports_loadFile__2(__then) {
                      if (__5) {
/*   147 */             js = fiberjs;
                        __then();
                      }
                       else {
/*   149 */             return mtime(__cb(_, __frame, 22, 12, function ___(__0, __6) {
/*   149 */               mtimejs = __6;
                          __then();
/*   149 */             }, true), js);
                      }
                    ;
                    })(function __$exports_loadFile__2() {
/*   151 */           return mtime(__cb(_, __frame, 24, 12, function ___(__0, __7) {
/*   151 */             mtimejs_ = __7;
/*   152 */             options.lines = (options.lines || ((dontSave ? "preserve" : "mark")));
/*   154 */             transform = _getTransform(options);
/*   155 */             banner = _banner(transform.version);
                        return (function __$exports_loadFile__2(__then) {
/*   156 */               if (mtimejs_) {
/*   157 */                 options.sourceName = js_;
/*   158 */                 return fs.readFile(js_, "utf8", __cb(_, __frame, 31, 16, function ___(__0, __8) {
                              content = __8;
/*   159 */                   shebangparse = parseShebang(content);
/*   160 */                   shebang = shebangparse[0];
/*   161 */                   le = shebangparse[2];
/*   162 */                   content = shebangparse[1];
/*   164 */                   banner = ((shebang + le) + banner);
                              return (function __$exports_loadFile__2(_) {
/*   165 */                     var __2 = mtimejs;
                                if (!__2) {
                                  return _(null, __2);
                                }
                              ;
/*   165 */                     return fs.readFile(js, "utf8", __cb(_, __frame, 38, 31, _, true));
                              })(__cb(_, __frame, -126, 6, function ___(__0, __9) {
                                transformed = __9;
/*   166 */                     if ((((transformed && (mtimejs_ < mtimejs)) && (transformed.substring(0, banner.length) == banner)) && !options.force)) {
/*   167 */                       return _(null, transformed);
                                }
                              ;
/*   169 */                     if (options.verbose) {
/*   170 */                       console.log(((("streamline: transforming: " + js_) + " to ") + js));
                                }
                              ;
/*   172 */                     transformed = ((shebang + banner) + _transform(transform, content, options));
/*   173 */                     if (((options.action === "compile") || !dontSave)) {
/*   175 */                       try {
/*   176 */                         fs.writeFile(js, transformed, "utf8");
/*   177 */                       } catch (ex) {
                                  
                                  };
                                }
                              ;
/*   179 */                     return _(null, transformed);
                              }, true));
                            }, true));
                          }
                           else {
/*   181 */                 options.sourceName = js;
/*   182 */                 return fs.readFile(js, "utf8", __cb(_, __frame, 55, 16, function ___(__0, __10) {
                              content = __10;
                              return (function __$exports_loadFile__2(__then) {
/*   184 */                     if ((ext === "._js")) {
/*   185 */                       return cachedTransform(__cb(_, __frame, 58, 10, _, true), content, path, transform, banner, options);
                                }
                                 else {
                                  return (function __$exports_loadFile__2(__then) {
/*   186 */                         if (matches = streamlineRE.exec(content)) {
/*   187 */                           try {
/*   188 */                             (matches[1] && _extend(options, JSON.parse(matches[1])));
/*   189 */                           } catch (ex) {
/*   190 */                             return _(new Error(("Invalid JSON syntax for streamline options: " + matches[1])));
                                      };
/*   192 */                           content = ((content.substring(0, matches.index) + "true") + content.substring((matches.index + matches[0].length)));
/*   193 */                           return cachedTransform(__cb(_, __frame, 66, 10, _, true), content, path, transform, banner, options);
                                    }
                                     else {
/*   195 */                           return _(null, content);
                                    }
                                  ;
                                  })(__then);
                                }
                              ;
                              })(__then);
                            }, true));
                          }
                        ;
                        })(_);
/*   151 */           }, true), js_);
                    });
                  }, true));
                });
              });
            };
/*   200 */ function mtimeSync(fname) {
/*   201 */   try {
/*   202 */     return fs.statSync(fname).mtime;
/*   203 */   } catch (ex) {
/*   204 */     return 0;
              };
            };
/*   211 */ exports.transformModule = function(content, path, options) {
/*   212 */   options = _extend({
/*   212 */   }, (options || {
              }));
/*   214 */   var ext = fspath.extname(path);
/*   215 */   var basename = fspath.basename(path, ext);
/*   216 */   var dirname = fspath.dirname(path);
/*   218 */   var mtimejs, mtimejs_;
/*   219 */   var dontSave = (basename[(basename.length - 1)] == "_");
/*   220 */   var jsbase = (dontSave ? basename.substr(0, (basename.length - 1)) : basename);
/*   221 */   var js = (((dirname + "/") + jsbase) + ext);
/*   222 */   var js_ = ((((dirname + "/") + jsbase) + "_") + ext);
/*   223 */   var fiberjs = ((((dirname + "/") + jsbase) + "--fibers") + ext);
/*   224 */   if ((options.fibers && (mtimejs = mtimeSync(fiberjs)))) {
/*   225 */     js = fiberjs;
              }
/*   226 */    else {
/*   227 */     mtimejs = mtimeSync(js);
              }
            ;
/*   229 */   mtimejs_ = mtimeSync(js_);
/*   230 */   options.lines = (options.lines || ((dontSave ? "preserve" : "mark")));
/*   232 */   var transform = _getTransform(options);
/*   233 */   var banner = _banner(transform.version);
/*   235 */   if (mtimejs_) {
/*   236 */     options.sourceName = js_;
/*   237 */     if (!dontSave) {
/*   238 */       content = fs.readFileSync(js_, "utf8");
                };
/*   239 */     var shebangparse = parseShebang(content);
/*   240 */     var shebang = shebangparse[0];
/*   241 */     var le = shebangparse[2];
/*   242 */     content = shebangparse[1];
/*   244 */     banner = ((shebang + le) + banner);
/*   245 */     var transformed = (mtimejs && fs.readFileSync(js, "utf8"));
/*   246 */     if ((((transformed && (mtimejs_ < mtimejs)) && (transformed.substring(0, banner.length) == banner)) && !options.force)) {
/*   246 */       return transformed
                };
/*   247 */     if (options.verbose) {
/*   247 */       console.log(("streamline: transforming: " + js_));
                };
/*   248 */     var transformed = (banner + _transform(transform, content, options));
/*   249 */     if (!dontSave) {
/*   251 */       try {
/*   252 */         fs.writeFileSync(js, transformed, "utf8");
/*   253 */       } catch (ex) {
                  
                  };
                }
              ;
/*   255 */     return transformed;
              }
/*   256 */    else {
/*   257 */     options.sourceName = path;
/*   258 */     var matches;
/*   259 */     if (((ext !== ".js") && (ext !== ".coffee"))) {
/*   261 */       var shebangparse = parseShebang(content);
/*   262 */       var shebang = shebangparse[0];
/*   263 */       content = (shebangparse[2] + shebangparse[1]);
/*   264 */       return transform.transform(content, options);
                }
/*   265 */      else if (matches = streamlineRE.exec(content)) {
/*   266 */       try {
/*   267 */         (matches[1] && _extend(options, JSON.parse(matches[1])));
/*   268 */       } catch (ex) {
/*   269 */         throw new Error(("Invalid JSON syntax for streamline options: " + matches[1]));
                  };
/*   271 */       content = ((content.substring(0, matches.index) + "true") + content.substring((matches.index + matches[0].length)));
/*   272 */       return cachedTransformSync(content, path, transform, banner, options);
                }
/*   273 */      else {
/*   274 */       return content;
                }
                
              ;
              }
            ;
            };
/*   279 */ var root = (((process.env.HOME || ((process.env.HOMEDRIVE + process.env.HOMEPATH)).replace(/\\/g, "/"))) + "/.streamline");
/*   281 */ var dirMode = parseInt("777", 8);
/*   283 */ function mkdirs(_, path) {
              var p, i, segs, seg;
              var __frame = {
                name: "mkdirs",
                line: 283
              };
              return __func(_, this, arguments, mkdirs, 0, __frame, function __$mkdirs() {
/*   284 */     p = "";
/*   285 */     i = 0;
/*   286 */     segs = path.split("/").slice(0, -1);
                return (function ___(__break) {
                  var __more;
                  var __loop = __cb(_, __frame, 0, 0, function __$mkdirs() {
                    __more = false;
/*   287 */         var __3 = (i < segs.length);
                    if (__3) {
/*   288 */           seg = segs[i];
/*   289 */           p += (((i++ ? "/" : "")) + seg);
                      return (function __$mkdirs(_) {
/*   290 */             var __1 = (i > 1);
                        if (!__1) {
                          return _(null, __1);
                        }
                      ;
/*   290 */             return _exists(__cb(_, __frame, 7, 16, function ___(__0, __3) {
/*   290 */               var __2 = !__3;
                          return _(null, __2);
/*   290 */             }, true), p);
                      })(__cb(_, __frame, -282, 6, function ___(__0, __2) {
                        return (function __$mkdirs(__then) {
                          if (__2) {
/*   290 */                 return fs.mkdir(p, dirMode, __cb(_, __frame, 7, 31, __then, true));
                          }
                           else {
                            __then();
                          }
                        ;
                        })(function __$mkdirs() {
                          while (__more) {
                            __loop();
                          };
                          __more = true;
                        });
                      }, true));
                    }
                     else {
                      __break();
                    }
                  ;
                  });
                  do {
                    __loop();
                  } while (__more);
                  __more = true;
                })(_);
              });
            };
/*   294 */ function cachedTransform(_, content, path, transform, banner, options) {
              var i, dir, f, transformed;
              var __frame = {
                name: "cachedTransform",
                line: 294
              };
              return __func(_, this, arguments, cachedTransform, 0, __frame, function __$cachedTransform() {
/*   295 */     path = path.replace(/\\/g, "/");
/*   296 */     i = path.indexOf("node_modules/");
/*   297 */     if ((i < 0)) {
/*   297 */       i = path.lastIndexOf("/");
                }
                 else {
/*   298 */       i += "node_modules".length;
                }
              ;
/*   300 */     dir = ((root + "/") + ((options.fibers ? "fibers" : "callbacks")));
/*   301 */     dir += ("/" + path.substring(0, i).replace(/[\/\:]/g, "__"));
/*   302 */     f = (dir + path.substring(i));
/*   303 */     return mkdirs(__cb(_, __frame, 9, 1, function __$cachedTransform() {
/*   305 */       return mtime(__cb(_, __frame, 11, 5, function ___(__0, __2) {
/*   305 */         return mtime(__cb(_, __frame, 11, 19, function ___(__0, __3) {
/*   305 */           var __1 = (__2 > __3);
                      return (function __$cachedTransform(__then) {
                        if (__1) {
/*   306 */               return fs.readFile(f, "utf8", __cb(_, __frame, 12, 16, function ___(__0, __4) {
/*   306 */                 transformed = __4;
/*   307 */                 if ((transformed.substring(0, banner.length) === banner)) {
/*   307 */                   return _(null, transformed);
                            }
                          ;
                            __then();
                          }, true));
                        }
                         else {
                          __then();
                        }
                      ;
                      })(function __$cachedTransform() {
/*   310 */             if (options.verbose) {
/*   310 */               console.log(("streamline: transforming: " + path));
                        }
                      ;
/*   311 */             options.lines = "preserve";
/*   312 */             transformed = (banner + _transform(transform, content, options));
                        return (function __$cachedTransform(__then) {
/*   313 */               if ((path.indexOf("/tmp--") < 0)) {
/*   313 */                 return fs.writeFile(f, transformed, "utf8", __cb(_, __frame, 19, 33, __then, true));
                          }
                           else {
                            __then();
                          }
                        ;
                        })(function __$cachedTransform() {
/*   314 */               return _(null, transformed);
                        });
                      });
/*   305 */         }, true), path);
/*   305 */       }, true), f);
/*   303 */     }, true), f);
              });
            };
/*   317 */ function mkdirsSync(path) {
/*   318 */   var p = "", i = 0;
/*   320 */   path.split("/").slice(0, -1).forEach(function(seg) {
/*   321 */     p += (((i++ ? "/" : "")) + seg);
/*   322 */     if (((i > 1) && !fspath.existsSync(p))) {
/*   322 */       fs.mkdirSync(p, dirMode);
                };
              });
            };
/*   326 */ function cachedTransformSync(content, path, transform, banner, options) {
/*   327 */   path = path.replace(/\\/g, "/");
/*   328 */   var i = path.indexOf("node_modules/");
/*   329 */   if ((i < 0)) {
/*   329 */     i = path.lastIndexOf("/");
              } else {
/*   330 */     i += "node_modules".length;
              };
/*   332 */   var dir = ((root + "/") + ((options.fibers ? "fibers" : "callbacks")));
/*   333 */   dir += ("/" + path.substring(0, i).replace(/[\/:]/g, "__"));
/*   334 */   var f = (dir + path.substring(i));
/*   335 */   mkdirsSync(f);
/*   336 */   var transformed;
/*   337 */   if ((mtimeSync(f) > mtimeSync(path))) {
/*   338 */     transformed = fs.readFileSync(f, "utf8");
/*   339 */     if ((transformed.substring(0, banner.length) === banner)) {
/*   339 */       return transformed
                };
              }
            ;
/*   342 */   if (options.verbose) {
/*   342 */     console.log(("streamline: transforming: " + path));
              };
/*   343 */   var opts = Object.keys(options).reduce(function(r, k) {
/*   343 */     r[k] = options[k];
/*   343 */     return r;
/*   343 */   }, {
              });
/*   344 */   opts.lines = "preserve";
/*   345 */   transformed = (banner + _transform(transform, content, opts));
/*   346 */   if ((path.indexOf("/tmp--") < 0)) {
/*   346 */     fs.writeFileSync(f, transformed, "utf8");
              };
/*   347 */   return transformed;
            };
/*   350 */ exports.cachedTransformSync = function(content, path, transform, options) {
/*   351 */   var banner = _banner(transform.version);
/*   352 */   return cachedTransformSync(content, path, {
/*   352 */     transform: transform
/*   352 */   }, banner, options);
            };
/*   360 */ exports.compile = function exports_compile__3(_, paths, options) {
              var flows, failed, transform, cwd;
/*   364 */   function _compile(_, path, options) {
                var stat, ext;
                var __frame = {
                  name: "_compile",
                  line: 364
                };
                return __func(_, this, arguments, _compile, 0, __frame, function __$_compile() {
/*   365 */       return fs.stat(path, __cb(_, __frame, 1, 13, function ___(__0, __2) {
                    stat = __2;
                    return (function __$_compile(__then) {
/*   366 */           if (stat.isDirectory()) {
/*   367 */             return fs.readdir(path, __cb(_, __frame, 3, 17, function ___(__0, __3) {
/*   367 */               return flows.each(__cb(_, __frame, 3, 3, __then, true), __3, function __1(_, f) {
                            var __frame = {
                              name: "__1",
                              line: 367
                            };
                            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
/*   368 */                   return _compile(__cb(_, __frame, 1, 4, _, true), ((path + "/") + f), options);
                            });
                          });
                        }, true));
                      }
                       else {
                        return (function __$_compile(__then) {
/*   370 */               if (stat.isFile()) {
                            return (function ___(__then) {
                              (function ___(_) {
                                __tryCatch(_, function __$_compile() {
/*   372 */                       return exports.loadFile(__cb(_, __frame, 8, 4, function __$_compile() {
/*   373 */                         ext = fspath.extname(path);
                                    return (function __$_compile(__then) {
/*   374 */                           if (((ext === "._js") || (ext === "._coffee"))) {
/*   375 */                             return exports.compileFile(__cb(_, __frame, 11, 5, __then, true), path, options);
                                      }
                                       else {
/*   377 */                             return exports.loadFile(__cb(_, __frame, 13, 5, __then, true), path, options);
                                      }
                                    ;
                                    })(__then);
/*   372 */                       }, true), path, options);
                                });
                              })(function ___(ex, __result) {
                                __tryCatch(_, function __$_compile() {
                                  if (ex) {
/*   380 */                         console.error(ex.stack);
/*   381 */                         failed++;
                                    __then();
                                  }
                                   else {
                                    _(null, __result);
                                  }
                                ;
                                });
                              });
                            })(function ___() {
                              __tryCatch(_, __then);
                            });
                          }
                           else {
                            __then();
                          }
                        ;
                        })(__then);
                      }
                    ;
                    })(_);
                  }, true));
                });
              };
              var __frame = {
                name: "exports_compile__3",
                line: 360
              };
              return __func(_, this, arguments, exports_compile__3, 0, __frame, function __$exports_compile__3() {
/*   362 */     flows = require("../util/flows");
/*   387 */     failed = 0;
/*   388 */     options = (options || {
                });
/*   389 */     transform = _getTransform(options);
/*   390 */     if (options.verbose) {
/*   390 */       console.log(("transform version: " + transform.version));
                }
              ;
/*   391 */     if ((!paths || (paths.length == 0))) {
/*   391 */       return _(new Error("cannot compile: no files specified"));
                }
              ;
/*   392 */     cwd = process.cwd();
/*   393 */     return flows.each(__cb(_, __frame, 33, 1, function __$exports_compile__3() {
/*   396 */       if (failed) {
/*   396 */         return _(new Error((("errors found in " + failed) + " files")));
                  }
                ;
                  _();
/*   393 */     }, true), paths, function __1(_, path) {
                  var __frame = {
                    name: "__1",
                    line: 393
                  };
                  return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
/*   394 */         return _compile(__cb(_, __frame, 1, 2, _, true), fspath.resolve(cwd, path), options);
                  });
                });
              });
            };
