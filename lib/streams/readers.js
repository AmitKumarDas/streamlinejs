/*** Generated by streamline 0.1.36-stack - DO NOT EDIT ***/
"use strict";
var __global = typeof global !== 'undefined' ? global : window;var __srcName='./lib/streams/readers_.js';function __Frame(line, name){ this.line = line; this.name = name; this.prev = __global.__frame; __global.__frame = this; };__Frame.prototype.file = __srcName;__Frame.prototype.err = function(_, e){e.__frame = e.__frame || this.prev;__propagate(_, e);};
function __cb(_, frame, offset, col, fn){ var ctx = __global.__context; frame.offset = offset; frame.col = col; return function ___(err, result){ var oldFrame = __global.__frame; __global.__frame = frame; __global.__context = ctx; try { if (err) { err.__frame = err.__frame || frame; return _(err); } return fn(null, result); } catch (ex) { ex.__frame = ex.__frame || frame; return __propagate(_, ex); } finally { __global.__frame = oldFrame; } } }
function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function ___(e, r){ cb(e, r); }; fn.apply(this, args); return function ___(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); }
function __nt(_, frame, fn){ var i = 0; var cb = __cb(_, frame, 0, 0, fn); var safeCb = function ___(){ try { cb(); } catch (ex) { __propagate(cb, ex); } }; if (typeof process != "undefined" && typeof process.nextTick == "function") return function ___(){ if (++i % 20 == 0) process.nextTick(safeCb); else cb(); }; else return function ___(){ if (++i % 20 == 0) setTimeout(safeCb); else cb(); }; }
function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err){ if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
var streams = require("./streams");
exports.Reader = function(stream, boundary, options) {
  options = (options || {
  });
  options.defaultSize = (options.defaultSize || 512);
  if ((!stream.emitter && (typeof stream.on === "function"))) {
    stream = new streams.ReadableStream(stream, options);
    stream.setEncoding((options.encoding || "utf8"));
  }
;
  if (!boundary) {
    boundary = "\n";
  };
  this.readItem = function readItem__1(_) {
    if (!_) {
      return __future(readItem__1, arguments, 0);
    }
  ;
    var __frame = new __Frame(28, "readItem__1");
    try {
      var chunks, len, chunk, i;
      chunks = [];
      len = options.defaultSize;
      return (function ___(__break) {
        var __loop = __nt(_, __frame, function __$readItem__1() {
          var __2 = stream;
          if (__2) {
            return stream.read(__cb(_, __frame, 4, 15, function ___(__0, __1) {
              chunk = __1;
              if ((chunk == null)) {
                stream = null;
              }
               else {
                i = chunk.indexOf(boundary);
                if ((i >= 0)) {
                  stream.unread(chunk.substring((i + boundary.length)));
                  chunks.push(chunk.substring(0, i));
                  return __break();
                }
                 else {
                  if ((chunk.length == (len + boundary.length))) {
                    stream.unread(chunk.substring(len));
                    chunks.push(chunk.substring(0, len));
                  }
                   else {
                    return _(new Error(((("missing boundary:" + boundary) + " in: ") + chunk)));
                  }
                ;
                }
              ;
              }
            ;
              __loop();
            }), (len + boundary.length));
          }
           else {
            __break();
          }
        ;
        });
        __loop();
      })(function __$readItem__1() {
        return _(null, ((chunks.length == 0) ? null : chunks.join("")));
      });
    } catch (e) {
      __frame.err(_, e);
    } finally {
      __global.__frame = __frame.prev;
    };
  };
  this.close = function close__2(_) {
    if (!_) {
      return __future(close__2, arguments, 0);
    }
  ;
    var __frame = new __Frame(51, "close__2");
    try {
      stream = null;
      _();
    } catch (e) {
      __frame.err(_, e);
    } finally {
      __global.__frame = __frame.prev;
    };
  };
};