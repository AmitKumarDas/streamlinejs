/*** Generated by streamline 0.1.22 - DO NOT EDIT ***/

"use strict";
var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn) { var ctx = __global.__context; return function(err, result) { __global.__context = ctx; if (err) return _(err); return fn(null, result); } }
function __future(fn, args, i) { var done, err, result; var cb = function(e, r) { done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r) { cb(e, r); }; fn.apply(this, args); return function(_) { if (done) _.call(this, err, result); else cb = _.bind(this); }.bind(this); }
var urlHelper = require("streamline/lib/util/url");
function _classifyMedia(str) {
  if (((str == "*") || (str == "*/*"))) {
    return "*"
  };
  var lower = str.toLowerCase();
  if ((lower.indexOf("xml") >= 0)) {
    return "xml"
  };
  if ((lower.indexOf("html") >= 0)) {
    return "html"
  };
  if ((lower.indexOf("json") >= 0)) {
    return "json"
  };
  if ((lower.indexOf("text") >= 0)) {
    return "text"
  };
  if ((lower.indexOf("image") >= 0)) {
    return "image"
  };
  return "unknown";
};
exports.parseAccept = function __1(str) {
  var accept = ((str || "")).toString().split(/,\s*/).map(function __1(part, i) {
    var m = part.match(/^([^\s,]+?)(?:;\s*q=(\d+(?:\.\d+)?))?$/);
    return (m && [m[1],Number((m[2] || 1)),i,]);
  }).filter(function __2(elt) {
    return elt;
  }).sort(function __3(elt1, elt2) {
    return ((elt2[1] - elt1[1]) || (elt1[2] - elt2[2]));
  }).map(function __4(elt) {
    var split = elt[0].split(";");
    var result = {
      rawType: split[0],
      type: _classifyMedia(split[0]),
      parameters: {
      }
    };
    split.slice(1).forEach(function __1(str) {
      var pair = str.split(/\s*=\s*/);
      result.parameters[pair[0]] = pair[1];
    });
    return result;
  });
  return ((accept.length > 0) ? accept : [{
    rawType: "*",
    type: "*",
    parameters: {
    }
  },]);
};
function HttpError(statusCode, message) {
  this.statusCode = statusCode;
  this.message = message;
  this.stack = new Error().stack;
};
exports.tracer = null;
exports.HttpContext = function __2(request, response, options) {
  if ((request == null)) {
    return
  };
  options = (options || {
  });
  if (exports.tracer) {
    exports.tracer((((("\nHTTP REQUEST: " + request.method) + " ") + request.url) + "\n"));
    exports.tracer((("headers: " + JSON.stringify(request.headers)) + "\n"));
  }
;
  this.request = request;
  this.resp = response;
  this.method = ((request.headers[(options.methodHeader || "x-http-method-override")] || request.method)).toLowerCase();
  var _split = request.url.split("?");
  this.path = _split.splice(0, 1)[0];
  var _urlBegin = ((((request.socket.secure ? "https" : "http")) + "://") + request.headers.host);
  this.url = (_urlBegin + this.path);
  this.rawQuery = _split.join("?");
  this.query = urlHelper.parseQueryString(this.rawQuery);
  var _segments = this.path.split("/").map(function __1(seg) {
    return decodeURIComponent(seg);
  });
  var _segI = 1;
  this.walkUrl = function __2() {
    return _segments[_segI++];
  };
  this.walked = function __3() {
    return (_urlBegin + _segments.slice(0, _segI).join("/"));
  };
  this.rawAccept = ((this.query[options.acceptParam] || request.headers.accept) || "*");
  this.accept = exports.parseAccept(this.rawAccept);
  this.parseBody = function __4(_) {
    if (!_) {
      return __future(__4, arguments, 0);
    }
  ;
    var __then = _;
    var ct = request.headers["content-type"];
    if (!ct) {
      return _(null, null)
    };
    if ((ct.indexOf("application/json") !== 0)) {
      return _(new HttpError(415, ("expected application/json, got: " + ct)))
    };
    return request.readAll(__cb(_, function(__0, str) {
      if ((str == null)) {
        return _(null, null)
      };
      if (exports.tracer) {
        exports.tracer((("body: " + str) + "\n"));
      };
      return _(null, JSON.parse(str));
    }));
  };
  this.scratch = {
  };
};