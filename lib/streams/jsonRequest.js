/*** Generated by streamline 0.1.36-stack - DO NOT EDIT ***/
var __global = typeof global !== 'undefined' ? global : window;var __srcName='./lib/streams/jsonRequest_.js';
function __cb(_, frame, line, col, fn){ var ctx = __global.__context; frame.line = line; frame.col = col; return function ___(err, result){ __global.__frame = frame; __global.__context = ctx; if (err) { err.__frame = err.__frame || frame; return _(err); } try { return fn(null, result); } catch (ex) { ex.__frame = ex.__frame || frame; return __propagate(_, ex); } } }
function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function ___(e, r){ cb(e, r); }; fn.apply(this, args); return function ___(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); }
function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err){ if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
var streams = require("./streams");
exports.send = function Object$send(_, url, obj) {
  if (!_) {
    return __future(Object$send, arguments, 0);
  }
;
  var __frame = __global.__frame = {
    file: __srcName,
    name: "Object$send",
    prev: __global.__frame
  };
  try {
    var json, result;
    json = ((obj && (typeof obj !== "string")) ? JSON.stringify(obj) : obj);
    return streams.httpRequest({
      url: url,
      method: (json ? "POST" : "GET"),
      headers: {
        "content-type": "application/json"
      }
    }).end(json, "utf8").response(__cb(_, __frame, 20, 1, function ___(__0, __1) {
      return __1.readAll(__cb(_, __frame, 20, 1, function ___(__0, __2) {
        result = __2;
        return _(null, JSON.parse(result));
      }));
    }));
  } catch (e) {
    e.__frame = (e.__frame || __frame.prev);
    __global.__frame = __frame;
    return __propagate(_, e);
  };
};