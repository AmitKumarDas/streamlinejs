/*** Generated by streamline generators 0.1.0 - DO NOT EDIT ***/var fstreamline__ = require("streamline/lib/generators/runtime"); (fstreamline__.create(function(_) {var wait_ = fstreamline__.create(wait, 0), g2_ = fstreamline__.create(g2, 0), g3_ = fstreamline__.create(g3, 0), g1_ = fstreamline__.create(g1, 0); if (typeof setTimeout === 'undefined') {
	this.setTimeout = function(cb, ms) {
			return new require('uv').Timer().start(ms, 0, cb);
		}
}
if (typeof console === 'undefined') {
	this.console = {
		log: print
	};
}

function wait(_, ms) {
	yield fstreamline__.invoke(null, setTimeout, [_, ms], 0);
;yield;}

function g2(_) {
	console.log("G2: before wait")
	var r = yield wait(_, 1000);
	console.log("G2: after wait");
	yield  "hello";
}

function g3(_, arg) {
	console.log("G3: before wait")
	var r = yield wait(_, 1000);
	console.log("G3: after wait");
	//throw new Error("testing");
	yield  arg + arg;
}

function g1(_) {
	console.log("G1: before g2");
	var a = yield g2(_);
	console.log("G1: before a.next, a=" + a);
	var b = yield g3(_, a);
	console.log("G1: before yield, b=" + b)
	yield  "all done";
}

g1_(function(err, result) {
	console.log("err=" + err + ", result=" + result);
});
;yield;}, 0).call(this, function(err) {
  if (err) throw err;
}));