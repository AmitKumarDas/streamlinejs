/*** Generated by streamline --lines-preserve 0.1.3h - DO NOT EDIT ***/
 var __global = typeof global !== 'undefined' ? global : window; function __cb(_, self, fn){ var ctx = __global.__context; return function(err, result){ __global.__context = ctx; if (err) return _.call(self, err); return fn.call(self, null, result); } } function __throw(err){ if (err) throw err; } var fs = require("fs");
var path = require("path");
var streamline = require("streamline");
var transform = streamline.transform;
var flows = streamline.flows;

function _exists(fname, callback) {
 path.exists(fname, function(result) {
 callback(null, result); });};



function _mkdir(dir, mode, _) { var __ = (_ = (_ || __throw));
 var p = path.dirname(dir); return (function(__) {
 return _exists(p, __cb(_, this, function(__0, __1) { if (!__1) {
 return _mkdir(p, mode, __cb(_, this, __)); } ; return __(); })); }).call(this, function() {
 return fs.mkdir(dir, mode, __cb(_, this, __)); });};


function _compile(_, input, output, options) { var __ = (_ = (_ || __throw));
 return fs.stat(input, __cb(_, this, function(__0, stat) {
 if (stat.isDirectory()) {
 output = (output || input);
 return fs.readdir(input, __cb(_, this, function(__0, __3) { return flows.each(__cb(_, this, __), __3, function(_, f) { var __ = (_ = (_ || __throw));
 return _compile(__cb(_, this, __), path.join(input, f), path.join(output, f), options); }); })); } else {



 if ((stat.isFile() && input.match(/_\.js$/))) {
 output = (output || input);
 if (!output.match(/\.js$/)) {
 output = path.join(output, path.basename(input)); };
 output = output.replace(/_\.js$/, ".js");

 return fs.readFile(input, "utf8", __cb(_, this, function(__0, source) {
 var outDir = path.dirname(output); return (function(__) {
 return _exists(outDir, __cb(_, this, function(__0, __5) { if (!__5) {
 return _mkdir(outDir, 511, __cb(_, this, __)); } ; return __(); })); }).call(this, function() {
 var banner = transform.banner(options); return (function(__) { return (function(_) { var __ = (_ = (_ || __throw)); return (function(_) { var __ = (_ = (_ || __throw)); return (function(_) { var __ = (_ = (_ || __throw));
 var __val = !options.force; if ((!__val == true)) { return _(null, __val); } ; return _exists(output, _); }).call(this, __cb(_, this, function(__0, __val) { if ((!__val == true)) { return _(null, __val); } ; return fs.stat(output, __cb(_, this, function(__0, __2) { return _(null, (__2.mtime >= stat.mtime)); })); })); }).call(this, __cb(_, this, function(__0, __val) { if ((!__val == true)) { return _(null, __val); } ;
 return fs.readFile(output, "utf8", __cb(_, this, function(__0, __2) { return _(null, (__2.substring(0, banner.length) == banner)); })); })); }).call(this, __cb(_, this, function(__0, __1) { if (__1) { return _(null); } ; return __(); })); }).call(this, function() {


 if (options.verbose) {
 console.log(("compiling " + input)); };
 var transformed = transform.transform(source, options);
 return fs.writeFile(output, (banner + transformed), "utf8", __cb(_, this, __)); }); }); })); } ; return __(); } ; }));};




exports.compile = function(options, _) { var __ = (_ = (_ || __throw));
 options = (options || { });
 if (options.verbose) {
 console.log(("transform version: " + transform.version)); };
 if ((options.inputs.length == 0)) {
 return _(new Error("cannot compile: no files specified")) };
 var cwd = process.cwd;
 return flows.each(__cb(_, this, __), options.inputs, function(_, input) { var __ = (_ = (_ || __throw));
 return _compile(__cb(_, this, __), path.join(cwd, input), options.output, options); });};