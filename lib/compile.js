/*** Generated by streamline --lines-mark 0.1.3d - DO NOT EDIT ***/

var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, self, fn){ var ctx = __global.__context; return function(err, result){ __global.__context = ctx; if (err) return _.call(self, err); try { return fn.call(self, null, result); } catch (ex) { return __propagate(_, self, ex); } } }
function __propagate(_, self, err){ try { _.call(self, err); } catch (ex) { __uncaught(ex); } }
function __throw(err){ if (err) throw err; }
function __wrapIn(cb){ return function(err, result){ try { cb(err, result); } catch (ex) { __uncaught(ex); } } }
function __uncaught(ex){ console.error("UNCAUGHT EXCEPTION: " + ex.message + "\n" + ex.stack); }
/*     1 */ var fs = require("fs");
/*     2 */ var path = require("path");
/*     3 */ var streamline = require("streamline");
/*     4 */ var transform = streamline.transform;
/*     5 */ var flows = streamline.flows;
/*     7 */ function _exists(fname, callback) {
/*     8 */   path.exists(fname, function(result) {
/*     9 */     callback(null, result);
              });
            };
/*    13 */ function _mkdir(dir, mode, _) {
              var __ = (_ = __wrapIn((_ || __throw)));
              try {
/*    14 */     var p = path.dirname(dir);
                return (function(__) {
/*    15 */       return _exists(p, __cb(_, this, function(__0, __1) {
/*    15 */         if (!__1) {
/*    16 */           return _mkdir(p, mode, __cb(_, this, __));
                    }
                  ;
                    return __();
                  }));
                }).call(this, function() {
/*    17 */       return fs.mkdir(dir, mode, __cb(_, this, __));
                });
              } catch (e) {
                return __propagate(_, this, e);
              };
            };
/*    20 */ function _compile(_, input, output, options) {
              var __ = (_ = __wrapIn((_ || __throw)));
              try {
/*    21 */     return fs.stat(input, __cb(_, this, function(__0, stat) {
/*    22 */       if (stat.isDirectory()) {
/*    23 */         output = (output || input);
/*    24 */         return fs.readdir(input, __cb(_, this, function(__0, __3) {
/*    24 */           return flows.each(__cb(_, this, __), __3, function(_, f) {
                        var __ = (_ = __wrapIn((_ || __throw)));
                        try {
/*    25 */               return _compile(__cb(_, this, __), path.join(input, f), path.join(output, f), options);
                        } catch (e) {
                          return __propagate(_, this, e);
                        };
                      });
                    }));
                  }
                   else {
/*    29 */         if ((stat.isFile() && input.match(/_\.js$/))) {
/*    30 */           output = (output || input);
/*    31 */           if (!output.match(/\.js$/)) {
/*    32 */             output = path.join(output, path.basename(input));
                      };
/*    33 */           output = output.replace(/_\.js$/, ".js");
/*    35 */           return fs.readFile(input, "utf8", __cb(_, this, function(__0, source) {
/*    36 */             var outDir = path.dirname(output);
                        return (function(__) {
/*    37 */               return _exists(outDir, __cb(_, this, function(__0, __5) {
/*    37 */                 if (!__5) {
/*    38 */                   return _mkdir(outDir, 511, __cb(_, this, __));
                            }
                          ;
                            return __();
                          }));
                        }).call(this, function() {
/*    39 */               var banner = transform.banner(options);
                          return (function(__) {
                            return (function(_) {
                              var __ = (_ = __wrapIn((_ || __throw)));
                              try {
                                return (function(_) {
                                  var __ = (_ = __wrapIn((_ || __throw)));
                                  try {
                                    return (function(_) {
                                      var __ = (_ = __wrapIn((_ || __throw)));
                                      try {
/*    40 */                             var __val = !options.force;
                                        if ((!__val == true)) {
                                          return _(null, __val);
                                        }
                                      ;
/*    40 */                             return _exists(output, _);
                                      } catch (e) {
                                        return __propagate(_, this, e);
                                      };
                                    }).call(this, __cb(_, this, function(__0, __val) {
                                      if ((!__val == true)) {
                                        return _(null, __val);
                                      }
                                    ;
/*    40 */                           return fs.stat(output, __cb(_, this, function(__0, __2) {
/*    40 */                             return _(null, (__2.mtime >= stat.mtime));
                                      }));
                                    }));
                                  } catch (e) {
                                    return __propagate(_, this, e);
                                  };
                                }).call(this, __cb(_, this, function(__0, __val) {
                                  if ((!__val == true)) {
                                    return _(null, __val);
                                  }
                                ;
/*    41 */                       return fs.readFile(output, "utf8", __cb(_, this, function(__0, __2) {
/*    41 */                         return _(null, (__2.substring(0, banner.length) == banner));
                                  }));
                                }));
                              } catch (e) {
                                return __propagate(_, this, e);
                              };
                            }).call(this, __cb(_, this, function(__0, __1) {
/*    40 */                   if (__1) {
                                return _(null, null);
                              }
                            ;
                              return __();
                            }));
                          }).call(this, function() {
/*    44 */                 if (options.verbose) {
/*    45 */                   console.log(("compiling " + input));
                            };
/*    46 */                 var transformed = transform.transform(source, options);
/*    47 */                 return fs.writeFile(output, (banner + transformed), "utf8", __cb(_, this, __));
                          });
                        });
                      }));
                    }
                  ;
                    return __();
                  }
                ;
                }));
              } catch (e) {
                return __propagate(_, this, e);
              };
            };
/*    52 */ exports.compile = function(options, _) {
              var __ = (_ = __wrapIn((_ || __throw)));
              try {
/*    53 */     options = (options || {
                });
/*    54 */     if (options.verbose) {
/*    55 */       console.log(("transform version: " + transform.version));
                };
/*    56 */     if ((options.inputs.length == 0)) {
/*    57 */       return _(new Error("cannot compile: no files specified"))
                };
/*    58 */     var cwd = process.cwd;
/*    59 */     return flows.each(__cb(_, this, __), options.inputs, function(_, input) {
                  var __ = (_ = __wrapIn((_ || __throw)));
                  try {
/*    60 */         return _compile(__cb(_, this, __), path.join(cwd, input), options.output, options);
                  } catch (e) {
                    return __propagate(_, this, e);
                  };
                });
              } catch (e) {
                return __propagate(_, this, e);
              };
            };
