/*** Generated by streamline --lines-preserve 0.1.11 - DO NOT EDIT ***/
 "use strict"; var __global = typeof global !== 'undefined' ? global : window; function __cb(_, fn) { var ctx = __global.__context; return function(err, result) { __global.__context = ctx; if (err) return _(err); return fn(null, result); } } function __future(fn, args, i) { if (!fn) throw new Error("anonymous function requires callback"); var done, err, result; var cb = function(e, r) { done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r) { cb(e, r); }; fn.apply(this, args); return function(_) { if (typeof _ !== "function") throw new Error("future requires callback"); if (done) _.call(this, err, result); else cb = _.bind(this); }.bind(this); } var fs = require("fs");

var path = require("path");
var streamline = require("streamline");
var transform = streamline.transform;
var flows = streamline.flows;

function _exists(fname, callback) {
 path.exists(fname, function __1(result) {
 callback(null, result); });};



function _mkdir(dir, mode, _) { if (!_) { return __future(_mkdir, arguments, 2); }; var __ = _;
 var p = path.dirname(dir); return function(__) {
 return _exists(p, __cb(_, function(__0, __1) { if (!__1) {
 return _mkdir(p, mode, __cb(_, __)); } ; return __(); })); }(function() {
 return fs.mkdir(dir, mode, __cb(_, __)); });};


function _compile(_, input, output, options) { if (!_) { return __future(_compile, arguments, 0); }; var __ = _;
 return fs.stat(input, __cb(_, function(__0, stat) {
 if (stat.isDirectory()) {
 output = (output || input);
 return fs.readdir(input, __cb(_, function(__0, __4) { return flows.each(__cb(_, __), __4, function __1(_, f) { if (!_) { return __future(__1, arguments, 0); } ; var __ = _;
 return _compile(__cb(_, __), path.join(input, f), path.join(output, f), options); }); })); } else {



 if ((stat.isFile() && input.match(/_\.js$/))) {
 output = (output || input);
 if (!output.match(/\.js$/)) {
 output = path.join(output, path.basename(input)); };
 output = output.replace(/_\.js$/, ".js");

 return fs.readFile(input, "utf8", __cb(_, function(__0, source) {
 var outDir = path.dirname(output); return function(__) {
 return _exists(outDir, __cb(_, function(__0, __6) { if (!__6) {
 return _mkdir(outDir, 511, __cb(_, __)); } ; return __(); })); }(function() {
 var banner = transform.banner(options); return function(__) { return function __1(_) { if (!_) { return __future(__1, arguments, 0); } ; var __ = _; return function __1(_) { if (!_) { return __future(__1, arguments, 0); } ; var __ = _; return function __1(_) { if (!_) { return __future(__1, arguments, 0); } ; var __ = _;
 var __val = !options.force; if ((!__val == true)) { return _(null, __val); } ; return _exists(output, _); }(__cb(_, function(__0, __val) { if ((!__val == true)) { return _(null, __val); } ; return fs.stat(output, __cb(_, function(__0, __2) { return _(null, (__2.mtime >= stat.mtime)); })); })); }(__cb(_, function(__0, __val) { if ((!__val == true)) { return _(null, __val); } ;
 return fs.readFile(output, "utf8", __cb(_, function(__0, __2) { return _(null, (__2.substring(0, banner.length) == banner)); })); })); }(__cb(_, function(__0, __2) { if (__2) { return _(null); } ; return __(); })); }(function() {


 if (options.verbose) {
 console.log(("compiling " + input)); };
 var transformed = transform.transform(source, options);
 return fs.writeFile(output, (banner + transformed), "utf8", __cb(_, __)); }); }); })); } ; return __(); } ; }));};




exports.compile = function __1(options, _) { if (!_) { return __future(__1, arguments, 1); }; var __ = _;
 options = (options || { });
 if (options.verbose) {
 console.log(("transform version: " + transform.version)); };
 if ((options.inputs.length == 0)) {
 return _(new Error("cannot compile: no files specified")) };
 var cwd = process.cwd;
 return flows.each(__cb(_, __), options.inputs, function __1(_, input) { if (!_) { return __future(__1, arguments, 0); } ; var __ = _;
 return _compile(__cb(_, __), path.join(cwd, input), options.output, options); });};