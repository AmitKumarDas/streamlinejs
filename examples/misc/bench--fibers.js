/*** Generated by streamline fibers 0.1.0 - DO NOT EDIT ***/var fstreamline__ = require("streamline/lib/fibers/runtime"); (fstreamline__.create(function(_) {var bench_ = fstreamline__.create(bench), delay_ = fstreamline__.create(delay); function bench(_, name, fn) {var tryItStreamline_ = fstreamline__.create(tryItStreamline), run_ = fstreamline__.create(run);
	function tryItNative(cb, count) {
		var t0 = Date.now();
		var failed;

		function loop(i) {
			if (i < count) {
				fn(function(err) {
					if (err) return cb(err);
					try {
						loop(i + 1);
					} catch (ex) {
						!failed && console.log("Native\t\t" + name + "\tFAILED: " + ex.message);
						failed = true;
						cb(null, true);
					}
				});
			} else {
				var dt = (Date.now() - t0);
				if (dt < 100) return cb(null, false);
				dt = Math.round(dt * 100 * 1000 / count) / 100;
				console.log("Native\t\t" + name + "\t" + dt + "ns");
				return cb(null, true);
			}
		}
		loop(0);
	}

	function tryItStreamline(_, count) {
		var t0 = Date.now();
		for (var i = 0; i < count; i++) fstreamline__.invoke(null, fn, [_], 0);
		var dt = (Date.now() - t0);
		if (dt < 100) return false;
		dt = Math.round(dt * 100 * 1000 / count) / 100;
		console.log("Streamline\t" + name + "\t" + dt + "ns");
		return true;

	}

	function run(_, tryIt) {
		var count = 1;
		while (!fstreamline__.invoke(null, tryIt, [_, count], 0)) count *= 2;
	}
	fstreamline__.invoke(null, run_, [_, tryItStreamline_], 0);
	fstreamline__.invoke(null, run_, [_, tryItNative], 0);
}

function delay(_, val) {
	fstreamline__.invoke(process, "nextTick", [_], 0);
	return val;
}

fstreamline__.invoke(null, bench_, [_, "nop", fstreamline__.create(function(_) {}, 0)], 0)
fstreamline__.invoke(null, bench_, [_, "nextTick", fstreamline__.create(function(_) {
	fstreamline__.invoke(process, "nextTick", [_], 0);
}, 0)], 0)

fstreamline__.invoke(null, bench_, [_, "delay", fstreamline__.create(function(_) {
	fstreamline__.invoke(null, delay_, [_], 0);
}, 0)], 0)

fstreamline__.invoke(null, bench_, [_, "try/catch", fstreamline__.create(function(_) {
	try {
		fstreamline__.invoke(process, "nextTick", [_], 0);
	} catch (ex) {}
}, 0)], 0)

fstreamline__.invoke(null, bench_, [_, "try/catch/throw", fstreamline__.create(function(_) {
	try {
		fstreamline__.invoke(process, "nextTick", [_], 0);
		throw new Error("");
	} catch (ex) {}
}, 0)], 0)

fstreamline__.invoke(null, bench_, [_, "try/finally", fstreamline__.create(function(_) {
	try {
		fstreamline__.invoke(process, "nextTick", [_], 0);
	} finally {}
}, 0)], 0)

fstreamline__.invoke(null, bench_, [_, "nextTick if", fstreamline__.create(function(_) {
	if (true) fstreamline__.invoke(process, "nextTick", [_], 0);
}, 0)], 0)

fstreamline__.invoke(null, bench_, [_, "recurse", fstreamline__.create(function(_) {var f_ = fstreamline__.create(f);
	function f(_, depth) {
		if (depth > 0) fstreamline__.invoke(null, f_, [_, depth - 1], 0);
		else fstreamline__.invoke(process, "nextTick", [_], 0)
	};
	fstreamline__.invoke(null, f_, [_, 100], 0);
}, 0)], 0)

fstreamline__.invoke(null, bench_, [_, "mixed", fstreamline__.create(function(_) {
	for (var i = 0; fstreamline__.invoke(null, delay_, [_, i], 0) < 10; i++) {
		try {
			if (fstreamline__.invoke(null, delay_, [_, i], 0) % 2) {
				fstreamline__.invoke(process, "nextTick", [_], 0);
			}
		} catch (ex) {}
	}
}, 0)], 0)
}, 0).call(this, function(err) {
  if (err) throw err;
}));