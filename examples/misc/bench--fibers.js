/*** Generated by streamline fibers 0.1.0 - DO NOT EDIT ***/var fstreamline__ = require("streamline/lib/fibers/runtime"); (fstreamline__.create(function(_) {var bench_ = fstreamline__.create(bench), delay_ = fstreamline__.create(delay), recurse_ = fstreamline__.create(recurse), runAll_ = fstreamline__.create(runAll); 
var mode = typeof fstreamline__ !== 'undefined' ? "fibers" : "callback";

function bench(_, name, fn, native) {var tryStreamline_ = fstreamline__.create(tryStreamline), run_ = fstreamline__.create(run);
	function tryNative(cb, count) {
		var t0 = Date.now();
		var depth = 0;

		function loop(i) {
			if (++depth > 10) {
				console.log(mode + " native\t\t" + name + "\tSKIPPED (risk of stack overflow)");
				return cb(null, true);
			}
			if (i < count) {
				fn(function(err) {
					if (err) return cb(err);
						loop(i + 1);
				});
			} else {
				var dt = (Date.now() - t0);
				if (dt < 100) return cb(null, false);
				dt = Math.round(dt * 100 * 1000 / count) / 100;
				console.log(mode + " native\t\t" + name + "\t" + dt + "ns");
				return cb(null, true);
			}
			depth--;
		}
		loop(0);
	}

	function tryStreamline(_, count) {
		var t0 = Date.now();
		for (var i = 0; i < count; i++) fstreamline__.invoke(null, fn, [_], 0);
		var dt = (Date.now() - t0);
		if (dt < 100) return false;
		dt = Math.round(dt * 100 * 1000 / count) / 100;
		console.log(mode + " streamline\t" + name + "\t" + dt + "ns");
		return true;

	}

	function run(_, tryIt) {
		var count = 1;
		while (!fstreamline__.invoke(null, tryIt, [_, count], 0)) count *= 2;
	}
	fstreamline__.invoke(null, run_, [_, native ? tryNative : tryStreamline_], 0);
}

function delay(_, val) {
	fstreamline__.invoke(process, "nextTick", [_], 0);
	return val;
}

function recurse(_, depth) {
	if (depth > 0) fstreamline__.invoke(null, recurse_, [_, depth - 1], 0);
	else fstreamline__.invoke(process, "nextTick", [_], 0)
}

var benches = {
	"nop\t": fstreamline__.create(function(_) {}, 0),
	"nextTick": fstreamline__.create(function(_) {
		fstreamline__.invoke(process, "nextTick", [_], 0);
	}, 0),
	"delay\t": fstreamline__.create(function(_) {
		fstreamline__.invoke(null, delay_, [_], 0);
	}, 0),
	"try/catch": fstreamline__.create(function(_) {
		try {
			fstreamline__.invoke(process, "nextTick", [_], 0);
		} catch (ex) {}
	}, 0),
	"try/catch/throw": fstreamline__.create(function(_) {
		try {
			fstreamline__.invoke(process, "nextTick", [_], 0);
			throw new Error("");
		} catch (ex) {}
	}, 0),
	"try/finally": fstreamline__.create(function(_) {
		try {
			fstreamline__.invoke(process, "nextTick", [_], 0);
		} finally {}
	}, 0),
	"if\t": fstreamline__.create(function(_) {
		if (true) fstreamline__.invoke(process, "nextTick", [_], 0);
	}, 0),
	"recurse 2": fstreamline__.create(function(_) {
		fstreamline__.invoke(null, recurse_, [_, 2], 0);
	}, 0),
	"recurse 10": fstreamline__.create(function(_) {
		fstreamline__.invoke(null, recurse_, [_, 10], 0);
	}, 0),
	"recurse 100": fstreamline__.create(function(_) {
		fstreamline__.invoke(null, recurse_, [_, 100], 0);
	}, 0),
	"fact 10\t": fstreamline__.create(function(_) {var fact_ = fstreamline__.create(fact);
		function fact(_, n) {
			return n <= 1 ? fstreamline__.invoke(null, delay_, [_, 1], 0) : n * fstreamline__.invoke(null, fact_, [_, n - 1], 0);
		}
		fstreamline__.invoke(null, fact_, [_, 10], 0);
	}, 0),
	"fibo\t": fstreamline__.create(function(_) {var fibo_ = fstreamline__.create(fibo);
		function fibo(_, n) {
			return n <= 1 ? fstreamline__.invoke(null, delay_, [_, 1], 0) : fstreamline__.invoke(null, fibo_, [_, n-1], 0) + fstreamline__.invoke(null, fibo_, [_,n-2], 0);
		}
		fstreamline__.invoke(null, fibo_, [_, 6], 0);
	}, 0),
	"mixed\t": fstreamline__.create(function(_) {
		for (var i = 0; fstreamline__.invoke(null, delay_, [_, i], 0) < 10; i++) {
			try {
				if (fstreamline__.invoke(null, delay_, [_, i], 0) % 2) {
					fstreamline__.invoke(process, "nextTick", [_], 0);
				}
			} catch (ex) {}
		}
	}, 0)
}

function runAll(_, native) {
	for (var k in benches) {
		fstreamline__.invoke(null, bench_, [_, k, benches[k], native], 0)
	}
}

fstreamline__.invoke(null, runAll_, [_, false], 0);
fstreamline__.invoke(null, runAll_, [_, true], 0);
}, 0).call(this, function(err) {
  if (err) throw err;
}));