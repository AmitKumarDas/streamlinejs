/*** Generated by streamline fibers 0.1.0 - DO NOT EDIT ***/var fstreamline__ = require("streamline/lib/fibers/runtime"); (fstreamline__.create(function(_) {var du_ = fstreamline__.create(du); /*
 * Usage: node-streamline diskUsage2 [path]
 *
 * This file is a parallelized version of the `diskUsage.js` example. 
 * 
 * The fileFunnel call limits the number of concurrent open files to 20.
 * 
 * Note: You can disable the funnel by setting its size to -1.
 * 
 * On my machine, the parallel version is almost twice faster than the sequential version.
 */

var fs = require('fs');
var flows = require('streamline/lib/util/flows');

var fileFunnel = flows.funnel(20);

function du(_, path){ var __tmp;
	var total = 0;
	var stat = fstreamline__.invoke(fs, "stat", [path, _], 1);
	if (stat.isFile()) {
		fstreamline__.invoke(null, fileFunnel, [_, fstreamline__.create(function(_){ var __tmp;
			 __tmp = (__tmp = fstreamline__.invoke(fs, "readFile", [path, _], 1).length, total += __tmp);
		}, 0)], 0);
	}
	else 
		if (stat.isDirectory()) {
			var files = fstreamline__.invoke(fs, "readdir", [path, _], 1);
			var futures = files.map(function(file){
				return du_(null, path + "/" + file);
			});
			 __tmp = (__tmp = fstreamline__.invoke(flows, "reduce", [_, futures, fstreamline__.create(function(_, val, future) {
				return val + fstreamline__.invoke(null, future, [_], 0);
			}, 0), 0], 0), total += __tmp);
			console.log(path + ": " + total);
		}
		else {
			console.log(path + ": odd file");
		}
	return total;
}

try {
	var p = process.argv.length > 2 ? process.argv[2] : ".";
	
	var t0 = Date.now();
	fstreamline__.invoke(null, du_, [_, p], 0);
	console.log("completed in " + (Date.now() - t0) + " ms");
} 
catch (ex) {
	console.error(ex.stack);
}

}, 0).call(this, function(err) {
  if (err) throw err;
}));