/*** Generated by streamline 0.1.23 - DO NOT EDIT ***/

var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn) { var ctx = __global.__context; return function(err, result) { __global.__context = ctx; if (err) return _(err); try { return fn(null, result); } catch (ex) { return __propagate(_, ex); } } }
function __future(fn, args, i) { var done, err, result; var cb = function(e, r) { done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r) { cb(e, r); }; fn.apply(this, args); return function(_) { if (done) _.call(this, err, result); else cb = _.bind(this); }.bind(this); }
function __propagate(_, err) { try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err) { if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
            (function(_) {
              var __then = (_ = (_ || __trap));
/*    22 */   var fs = require("fs");
/*    23 */   var flows = require("streamline/lib/util/flows");
/*    25 */   var fileFunnel = flows.funnel(20);
/*    27 */   function du(_, path) {
                if (!_) {
                  return __future(du, arguments, 0);
                }
              ;
                var __then = _;
/*    28 */     var total = 0;
/*    29 */     return fs.stat(path, __cb(_, function(__0, stat) {
                  return function(__then) {
/*    30 */         if (stat.isFile()) {
/*    31 */           return fileFunnel(__cb(_, __then), function __1(_) {
                        if (!_) {
                          return __future(__1, arguments, 0);
                        }
                      ;
                        var __then = _;
/*    32 */             return fs.readFile(path, __cb(_, function(__0, __1) {
/*    32 */               total += __1.length;
                          return __then();
                        }));
                      });
                    }
                     else {
/*    36 */           if (stat.isDirectory()) {
/*    37 */             return fs.readdir(path, __cb(_, function(__0, files) {
/*    38 */               var futures = files.map(function __2(file) {
/*    39 */                 return du(null, ((path + "/") + file));
                          });
/*    41 */               return flows.reduce(__cb(_, function(__0, __7) {
/*    41 */                 total += __7;
/*    44 */                 console.log(((path + ": ") + total));
                            return __then();
/*    41 */               }), futures, function __3(_, val, future) {
                            if (!_) {
                              return __future(__3, arguments, 0);
                            }
                          ;
                            var __then = _;
/*    42 */                 return future(__cb(_, function(__0, __1) {
/*    42 */                   return _(null, (val + __1));
                            }));
/*    43 */               }, 0);
                        }));
                      }
/*    46 */            else {
/*    47 */             console.log((path + ": odd file"));
                      }
                    ;
                      return __then();
                    }
                  ;
                  }(function() {
/*    49 */         return _(null, total);
                  });
                }));
              };
/*    52 */   var p = ((process.argv.length > 2) ? process.argv[2] : ".");
/*    54 */   var t0 = Date.now();
/*    55 */   return du(__cb(_, function() {
/*    56 */     console.log((("completed in " + ((Date.now() - t0))) + " ms"));
                return __then();
/*    55 */   }), p);
            })();
