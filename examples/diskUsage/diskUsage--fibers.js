/*** Generated by streamline fibers 0.1.0 - DO NOT EDIT ***/var fstreamline__ = require("streamline/lib/fibers/runtime"); (fstreamline__.create(function(_) {var du_ = fstreamline__.create(du); /*
 * Usage: node-streamline diskUsage [path]
 *
 * Recursively computes the size of directories.
 * 
 * Demonstrates how standard asynchronous node.js functions 
 * like fs.stat, fs.readdir, fs.readFile can be called from 'streamlined'
 * Javascript code.  
 */

var fs = require('fs');

function du(_, path) {
	var total = 0;
	var stat = fstreamline__.invoke(fs, "stat", [path, _], 1);
	if (stat.isFile()) {
		total += fstreamline__.invoke(fs, "readFile", [path, _], 1).length;
	}
	else if (stat.isDirectory()) {
		var files = fstreamline__.invoke(fs, "readdir", [path, _], 1);
		for (var i = 0; i < files.length; i++) {
			total += fstreamline__.invoke(null, du_, [_, path + "/" + files[i]], 0);
		}
		console.log(path + ": " + total);
	}
	else {
		console.log(path + ": odd file");
	}
	return total;
}

try {
	var p = process.argv.length > 2 ? process.argv[2] : ".";
	
	var t0 = Date.now();
	fstreamline__.invoke(null, du_, [_, p], 0);
	console.log("completed in " + (Date.now() - t0) + " ms");
}
catch (ex) {
	console.error(ex.stack);
}

}, 0).call(this, function(err) {
  if (err) throw err;
}));