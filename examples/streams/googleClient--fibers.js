/*** Generated by streamline fibers 0.1.0 - DO NOT EDIT ***/var fstreamline__ = require("streamline/lib/fibers/runtime"); (fstreamline__.create(function(_) {var google_ = fstreamline__.create(google); /*
* Usage: node-streamline googleClient searchString
*
* Demonstrates the streamline http client wrapper
*/

// require the streamline streams wrapper
var streams = require('streamline/lib/streams/server/streams');

function google(str, _) {
	// Create the request.
	// The options are the same as for node's http.request call.
	// But the call also accepts a simple URL for the GET case
	// But streams.requestRequest does not take any callback parameter.
	// Instead, the callback is passed to the response(_) method (a few lines below).
	var req = streams.httpRequest({
		url: 'http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=' + str,
		proxy: process.env.http_proxy
	});
	
	// In the case of a POST request, this is where you would send
	// the body with req.write calls.
	
	// End the request and get a response object (asynchronously)
	var resp = fstreamline__.invoke(req.end(), "response", [_], 0);
	// Check the status, read the whole body (asynchronously) and parse it.
	return JSON.parse(fstreamline__.invoke(resp.checkStatus(200), "readAll", [_], 0));
}

try {
	// get the search string from the command line, defaulting to "node.js"
	var str = process.argv.length > 2 ? process.argv[2] : "node.js";
	
	// call google to get search results
	var result = fstreamline__.invoke(null, google_, [str, _], 1);
	
	// format the result and print it to console
	var formatted = result.responseData.results.map(function(entry){
		return entry.url + '\n\t' + entry.titleNoFormatting;
	}).join('\n');
	console.log(formatted);
}
catch (ex) {
	console.error(ex.stack);
}

}, 0).call(this, function(err) {
  if (err) throw err;
}));