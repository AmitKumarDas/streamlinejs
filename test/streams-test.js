/*** Generated by streamline 0.1.16 - DO NOT EDIT ***/

var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn) { var ctx = __global.__context; return function(err, result) { __global.__context = ctx; if (err) return _(err); try { return fn(null, result); } catch (ex) { return __propagate(_, ex); } } }
function __future(fn, args, i) { var done, err, result; var cb = function(e, r) { done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r) { cb(e, r); }; fn.apply(this, args); return function(_) { if (done) _.call(this, err, result); else cb = _.bind(this); }.bind(this); }
function __nt(_, fn) { var i = 0; var cb = __cb(_, fn); var safeCb = function() { try { cb(); } catch (ex) { __propagate(cb, ex); } }; if (typeof process != "undefined" && typeof process.nextTick == "function") return function() { if (++i % 20 == 0) process.nextTick(safeCb); else cb(); }; else return function() { if (++i % 20 == 0) setTimeout(safeCb); else cb(); }; }
function __propagate(_, err) { try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err) { if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
(function(_) {
  var __then = (_ = (_ || __trap));
  var http = require("http");
  var streams = require("../lib/streams");
  var bufSize = 30000;
  var bufCount = 80;
  var totalSize = (bufCount * bufSize);
  var modulo = 50;
  function makeBuffer(i) {
    var buf = new Buffer(bufSize);
    for (var j = 0; (j < bufSize); j++) {
      buf[j] = ((48 + i) + ((j % modulo)));;
    };
    return buf;
  };
  function checkBuffer(buf, start) {
    if ((buf == null)) {
      throw new Error("null buffer")
    };
    var i = Math.floor((start / bufSize));
    var j = (start % bufSize);
    for (var k = 0; (k < buf.length); k++, j++) {
      if ((j == bufSize)) {
        i++;
        j = 0;
      }
    ;
      if ((buf[k] !== ((48 + i) + ((j % modulo))))) {
        throw new Error(((((((("data corruption: i=" + i) + ", j=") + j) + " k=") + k) + " val=") + buf[k]))
      };
    };
    return (start + buf.length);
  };
  streams.httpServer(function __1(req, res, _) {
    if (!_) {
      return __future(__1, arguments, 2);
    }
  ;
    var __then = _;
    res.writeHead(200, {
      "Content-Type": "application/octet-stream"
    });
    res.stream.on("drain", function __1() {
      process.stderr.write("*");
    });
    var i = 0;
    var __4 = false;
    return function(__break) {
      var __loop = __nt(_, function() {
        var __then = __loop;
        if (__4) {
          i++;
        }
         else {
          __4 = true;
        }
      ;
        if ((i < bufCount)) {
          return res.write(__cb(_, function() {
            return process.nextTick(__cb(_, __then));
          }), makeBuffer(i));
        }
         else {
          return __break();
        }
      ;
      });
      return __loop();
    }(function() {
      res.end();
      return __then();
    });
  }).listen(1337, "127.0.0.1");
  console.error("Server running at http://127.0.0.1:1337/");
  function addBufferHooks(stream) {
    var pause = stream.pause.bind(stream);
    stream.pause = function __1() {
      process.stderr.write("<");
      pause();
    };
    var resume = stream.resume.bind(stream);
    stream.resume = function __2() {
      process.stderr.write(">");
      resume();
    };
  };
  function test(_, name, options, fn) {
    if (!_) {
      return __future(test, arguments, 0);
    }
  ;
    var __then = _;
    process.stderr.write(("	testing " + name));
    options.url = "http://127.0.0.1:1337/";
    return streams.httpRequest(options).end().response(__cb(_, function(__0, resp) {
      addBufferHooks(resp.stream);
      return fn(__cb(_, function() {
        return function(__then) {
          return resp.read(__cb(_, function(__0, __3) {
            if (__3) {
              return _(new Error("unexpected data at end"));
            }
          ;
            return __then();
          }));
        }(function() {
          console.error(" ok");
          return __then();
        });
      }), resp);
    }));
  };
  function dot(_) {
    if (!_) {
      return __future(dot, arguments, 0);
    }
  ;
    var __then = _;
    return process.nextTick(__cb(_, function() {
      process.stderr.write(".");
      return __then();
    }));
  };
  function testPass(_, name, options) {
    if (!_) {
      return __future(testPass, arguments, 0);
    }
  ;
    var __then = _;
    console.error(("pass " + name));
    var t0 = Date.now();
    function testRead(_, name, size) {
      if (!_) {
        return __future(testRead, arguments, 0);
      }
    ;
      var __then = _;
      return test(__cb(_, __then), name, options, function __1(_, resp) {
        if (!_) {
          return __future(__1, arguments, 0);
        }
      ;
        var __then = _;
        var i = 0, total = 0;
        var __3 = false;
        return function(__break) {
          var __loop = __nt(_, function() {
            var __then = __loop;
            if (__3) {
              i++;
            }
             else {
              __3 = true;
            }
          ;
            if ((total < totalSize)) {
              var len = ((size && (typeof size === "function")) ? size() : size);
              return resp.read(__cb(_, function(__0, buf) {
                total = checkBuffer(buf, total);
                return dot(__cb(_, __then));
              }), len);
            }
             else {
              return __break();
            }
          ;
          });
          return __loop();
        }(__then);
      });
    };
    return testRead(__cb(_, function() {
      return testRead(__cb(_, function() {
        return testRead(__cb(_, function() {
          return testRead(__cb(_, function() {
            return testRead(__cb(_, function() {
              console.error((("pass completed in " + ((Date.now() - t0))) + " ms"));
              return __then();
            }), "random size read", function __1() {
              var r = Math.random();
              return Math.floor((((((r * r) * r) * r) * 3) * bufSize));
            });
          }), "odd size read", Math.floor((bufSize / 7)));
        }), "double size read", (bufSize * 2));
      }), "half size read", Math.floor((bufSize / 2)));
    }), "chunk read");
  };
  var oneTenth = Math.floor(((bufCount * bufSize) / 10));
  return testPass(__cb(_, function() {
    return testPass(__cb(_, function() {
      return testPass(__cb(_, function() {
        return testPass(__cb(_, function() {
          return testPass(__cb(_, function() {
            return testPass(__cb(_, function() {
              process.exit();
              return __then();
            }), "buffer all", {
              lowMark: 0,
              highMark: (11 * oneTenth)
            });
          }), "buffer 1 tenth and above", {
            lowMark: oneTenth,
            highMark: (11 * oneTenth)
          });
        }), "buffer 2/3 tenth", {
          lowMark: (2 * oneTenth),
          highMark: (3 * oneTenth)
        });
      }), "buffer 0/1 tenth", {
        lowMark: 0,
        highMark: oneTenth
      });
    }), "default buffering", {
    });
  }), "default buffering (warm up)", {
  });
})();