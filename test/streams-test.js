/*** Generated by streamline 0.1.16 - DO NOT EDIT ***/

var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn) { var ctx = __global.__context; return function(err, result) { __global.__context = ctx; if (err) return _(err); try { return fn(null, result); } catch (ex) { return __propagate(_, ex); } } }
function __future(fn, args, i) { var done, err, result; var cb = function(e, r) { done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r) { cb(e, r); }; fn.apply(this, args); return function(_) { if (done) _.call(this, err, result); else cb = _.bind(this); }.bind(this); }
function __nt(_, fn) { var i = 0; var cb = __cb(_, fn); var safeCb = function() { try { cb(); } catch (ex) { __propagate(cb, ex); } }; if (typeof process != "undefined" && typeof process.nextTick == "function") return function() { if (++i % 20 == 0) process.nextTick(safeCb); else cb(); }; else return function() { if (++i % 20 == 0) setTimeout(safeCb); else cb(); }; }
function __propagate(_, err) { try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err) { if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
            (function(_) {
              var __then = (_ = (_ || __trap));
/*     1 */   var http = require("http");
/*     2 */   var streams = require("../lib/streams");
/*     4 */   var bufSize = 1000;
/*     5 */   var bufCount = 8;
/*     6 */   var modulo = 50;
/*     8 */   function makeBuffer(i) {
/*     9 */     var buf = new Buffer(bufSize);
/*    10 */     for (var j = 0; (j < bufSize); j++) {
                  buf[j] = ((48 + i) + ((j % modulo)));;
                };
/*    13 */     return buf;
              };
/*    16 */   function checkBuffer(buf, i, offset, size) {
/*    17 */     if ((buf == null)) {
/*    18 */       throw new Error(("null buffer: " + i))
                };
/*    19 */     if ((buf.length != size)) {
/*    20 */       throw new Error(("bad buffer length: " + buf.length))
                };
/*    21 */     for (var j = 0; (j < size); j++) {
/*    22 */       var ii = (i + Math.floor((((offset + j)) / bufSize)));
/*    23 */       var jj = (offset + j);
/*    24 */       if ((buf[j] !== ((48 + ii) + ((jj % modulo))))) {
/*    25 */         throw new Error(((((("data corruption: ii=" + ii) + ", jj=") + jj) + " val=") + buf[j]))
                  };
                };
              };
/*    29 */   http.createServer(function __1(req, res, _) {
                if (!_) {
                  return __future(__1, arguments, 2);
                }
              ;
                var __then = _;
/*    30 */     res.writeHead(200, {
/*    30 */       "Content-Type": "application/octet-stream"
                });
/*    31 */     var i = 0;
                var __2 = false;
                return function(__break) {
                  var __loop = __nt(_, function() {
                    var __then = __loop;
                    if (__2) {
/*    31 */           i++;
                    }
                     else {
                      __2 = true;
                    }
                  ;
/*    31 */         if ((i < bufCount)) {
/*    32 */           res.write(makeBuffer(i));
/*    33 */           return process.nextTick(__cb(_, __then));
                    }
                     else {
                      return __break();
                    }
                  ;
                  });
                  return __loop();
                }(function() {
/*    35 */       res.end();
                  return __then();
                });
/*    36 */   }).listen(1337, "127.0.0.1");
/*    37 */   console.error("Server running at http://127.0.0.1:1337/");
/*    39 */   function addBufferHooks(stream) {
/*    40 */     var pause = stream.pause.bind(stream);
/*    41 */     stream.pause = function __1() {
/*    42 */       process.stderr.write("<");
/*    43 */       pause();
                };
/*    45 */     var resume = stream.resume.bind(stream);
/*    46 */     stream.resume = function __2() {
/*    47 */       process.stderr.write(">");
/*    48 */       resume();
                };
              };
/*    52 */   function test(_, name, options, fn) {
                if (!_) {
                  return __future(test, arguments, 0);
                }
              ;
                var __then = _;
/*    53 */     process.stderr.write(("	testing " + name));
/*    54 */     options.url = "http://127.0.0.1:1337/";
/*    55 */     return streams.httpRequest(options).end().response(__cb(_, function(__0, resp) {
/*    56 */       addBufferHooks(resp.stream);
/*    57 */       return fn(__cb(_, function() {
                    return function(__then) {
/*    58 */           return resp.read(__cb(_, function(__0, __3) {
/*    58 */             if (__3) {
/*    59 */               return _(new Error("unexpected data at end"));
                        }
                      ;
                        return __then();
                      }));
                    }(function() {
/*    60 */           console.error(" ok");
                      return __then();
                    });
/*    57 */       }), resp);
                }));
              };
/*    63 */   function dot(_) {
                if (!_) {
                  return __future(dot, arguments, 0);
                }
              ;
                var __then = _;
/*    64 */     return process.nextTick(__cb(_, function() {
/*    65 */       process.stderr.write(".");
                  return __then();
                }));
              };
/*    69 */   function testPass(_, name, options) {
                if (!_) {
                  return __future(testPass, arguments, 0);
                }
              ;
                var __then = _;
/*    70 */     console.error(("pass " + name));
/*    71 */     var t0 = Date.now();
/*    73 */     return test(__cb(_, function() {
/*    80 */       return test(__cb(_, function() {
/*    88 */         return test(__cb(_, function() {
/*    96 */           return test(__cb(_, function() {
/*   112 */             return test(__cb(_, function() {
/*   125 */               console.error((("pass completed in " + ((Date.now() - t0))) + " ms"));
                          return __then();
/*   112 */             }), "random size read", options, function __5(_, resp) {
                          if (!_) {
                            return __future(__5, arguments, 0);
                          }
                        ;
                          var __then = _;
/*   113 */               var total = 0;
                          return function(__break) {
                            var __loop = __nt(_, function() {
                              var __then = __loop;
/*   114 */                   if ((total < (bufCount * bufSize))) {
/*   115 */                     var len = Math.floor(((Math.random() * 3) * bufSize));
/*   116 */                     return resp.read(__cb(_, function(__0, buf) {
/*   117 */                       var expected = (((total + len) < (bufCount * bufSize)) ? len : ((bufCount * bufSize) - total));
/*   118 */                       checkBuffer(buf, Math.floor((total / bufSize)), (total % bufSize), expected);
/*   119 */                       total += buf.length;
/*   120 */                       return dot(__cb(_, __then));
/*   116 */                     }), len);
                              }
                               else {
                                return __break();
                              }
                            ;
                            });
                            return __loop();
                          }(function() {
/*   122 */                 if ((total != (bufCount * bufSize))) {
/*   123 */                   return _(new Error("bad total at end"))
                            };
                            return __then();
                          });
                        });
/*    96 */           }), "odd size read", options, function __4(_, resp) {
                        if (!_) {
                          return __future(__4, arguments, 0);
                        }
                      ;
                        var __then = _;
                        var buf;
/*    97 */             var total = 0;
/*    98 */             var i = 0;
                        var __3 = false;
                        return function(__break) {
                          var __loop = __nt(_, function() {
                            var __then = __loop;
                            if (__3) {
/*    98 */                   i++;
                            }
                             else {
                              __3 = true;
                            }
                          ;
/*    98 */                 if ((i < Math.floor((bufCount * 7)))) {
/*    99 */                   var len = Math.floor((bufSize / 7));
/*   100 */                   return resp.read(__cb(_, function(__0, __1) {
                                buf = __1;
/*   101 */                     checkBuffer(buf, Math.floor((total / bufSize)), (total % bufSize), len);
/*   102 */                     total += buf.length;
/*   103 */                     return dot(__cb(_, __then));
/*   100 */                   }), len);
                            }
                             else {
                              return __break();
                            }
                          ;
                          });
                          return __loop();
                        }(function() {
/*   105 */               var remain = ((bufCount * bufSize) - total);
/*   106 */               return resp.read(__cb(_, function(__0, __4) {
                            buf = __4;
/*   107 */                 checkBuffer(buf, (bufCount - 1), (total % bufSize), remain);
/*   108 */                 total += buf.length;
/*   109 */                 if ((total != (bufCount * bufSize))) {
/*   110 */                   return _(new Error("bad total at end"))
                            };
                            return __then();
/*   106 */               }), remain);
                        });
                      });
/*    88 */         }), "double size read", options, function __3(_, resp) {
                      if (!_) {
                        return __future(__3, arguments, 0);
                      }
                    ;
                      var __then = _;
/*    89 */           var i = 0;
                      var __3 = false;
                      return function(__break) {
                        var __loop = __nt(_, function() {
                          var __then = __loop;
                          if (__3) {
/*    89 */                 i++;
                          }
                           else {
                            __3 = true;
                          }
                        ;
/*    89 */               if ((i < Math.floor((bufCount / 2)))) {
/*    90 */                 var dbl = (bufSize * 2);
/*    91 */                 return resp.read(__cb(_, function(__0, buf) {
/*    92 */                   checkBuffer(buf, (i * 2), 0, dbl);
/*    93 */                   return dot(__cb(_, __then));
/*    91 */                 }), dbl);
                          }
                           else {
                            return __break();
                          }
                        ;
                        });
                        return __loop();
                      }(__then);
                    });
/*    80 */       }), "half size read", options, function __2(_, resp) {
                    if (!_) {
                      return __future(__2, arguments, 0);
                    }
                  ;
                    var __then = _;
/*    81 */         var i = 0;
                    var __3 = false;
                    return function(__break) {
                      var __loop = __nt(_, function() {
                        var __then = __loop;
                        if (__3) {
/*    81 */               i++;
                        }
                         else {
                          __3 = true;
                        }
                      ;
/*    81 */             if ((i < (bufCount * 2))) {
/*    82 */               var half = (bufSize / 2);
/*    83 */               return resp.read(__cb(_, function(__0, buf) {
/*    84 */                 checkBuffer(buf, Math.floor((i / 2)), (((i % 2)) * half), half);
/*    85 */                 return dot(__cb(_, __then));
/*    83 */               }), half);
                        }
                         else {
                          return __break();
                        }
                      ;
                      });
                      return __loop();
                    }(__then);
                  });
/*    73 */     }), "chunk read", options, function __1(_, resp) {
                  if (!_) {
                    return __future(__1, arguments, 0);
                  }
                ;
                  var __then = _;
/*    74 */       var i = 0;
                  var __3 = false;
                  return function(__break) {
                    var __loop = __nt(_, function() {
                      var __then = __loop;
                      if (__3) {
/*    74 */             i++;
                      }
                       else {
                        __3 = true;
                      }
                    ;
/*    74 */           if ((i < bufCount)) {
/*    75 */             return resp.read(__cb(_, function(__0, buf) {
/*    76 */               checkBuffer(buf, i, 0, bufSize);
/*    77 */               return dot(__cb(_, __then));
                        }));
                      }
                       else {
                        return __break();
                      }
                    ;
                    });
                    return __loop();
                  }(__then);
                });
              };
/*   128 */   var oneTenth = Math.floor(((bufCount * bufSize) / 10));
/*   129 */   return testPass(__cb(_, function() {
/*   130 */     return testPass(__cb(_, function() {
/*   131 */       return testPass(__cb(_, function() {
/*   132 */         return testPass(__cb(_, function() {
/*   133 */           return testPass(__cb(_, function() {
/*   134 */             return testPass(__cb(_, function() {
/*   135 */               process.exit();
                          return __then();
/*   134 */             }), "buffer all", {
/*   134 */               lowMark: 0,
/*   134 */               highMark: (11 * oneTenth)
                        });
/*   133 */           }), "buffer 1 tenth and above", {
/*   133 */             lowMark: oneTenth,
/*   133 */             highMark: (11 * oneTenth)
                      });
/*   132 */         }), "buffer 2/3 tenth", {
/*   132 */           lowMark: (2 * oneTenth),
/*   132 */           highMark: (3 * oneTenth)
                    });
/*   131 */       }), "buffer 0/1 tenth", {
/*   131 */         lowMark: 0,
/*   131 */         highMark: oneTenth
                  });
/*   130 */     }), "default buffering", {
                });
/*   129 */   }), "default buffering (warm up)", {
              });
            })();
