/*** Generated by streamline 0.1.36-stack - DO NOT EDIT ***/ var __global = typeof global !== 'undefined' ? global : window;var __srcName='./test/common/flows-test_.js'; function __cb(_, frame, line, col, fn){ var ctx = __global.__context; frame.line = line; frame.col = col; return function ___(err, result){ __global.__frame = frame; __global.__context = ctx; if (err) { err.__frame = err.__frame || frame; return _(err); } try { return fn(null, result); } catch (ex) { ex.__frame = ex.__frame || frame; return __propagate(_, ex); } } } function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function ___(e, r){ cb(e, r); }; fn.apply(this, args); return function ___(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); } function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } } function __trap(err){ if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } } var module = QUnit.module;

var flows = require("streamline/lib/util/flows");

function delay(_, val) { if (!_) { return __future(delay, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "delay", prev: __global.__frame }; try {
 return flows.nextTick(__cb(_, __frame, 6, 1, function __$delay() {
 return _(null, val); })); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };};


function delayFail(_, err) { if (!_) { return __future(delayFail, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "delayFail", prev: __global.__frame }; try {
 return flows.nextTick(__cb(_, __frame, 11, 1, function __$delayFail() {
 return _(err); })); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };};


module("flows");

asyncTest("each", 1, function __1(_) { if (!_) { return __future(__1, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try { var result;
 result = 1;
 return flows.each(__cb(_, __frame, 19, 1, function __$__1() {


 strictEqual(result, 24);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try { return delay(__cb(_, __frame, 20, 1, function ___(__0, __1) { result = (result * __1); _(); }), val); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});

asyncTest("map", 1, function __2(_) { if (!_) { return __future(__2, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__2", prev: __global.__frame }; try { var result;
 return flows.map(__cb(_, __frame, 26, 1, function ___(__0, __2) { result = __2;


 deepEqual(result, [2,4,6,8,]);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try { return delay(__cb(_, __frame, 27, 1, function ___(__0, __2) { var __1 = (2 * __2); return _(null, __1); }), val); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});

asyncTest("filter", 1, function __3(_) { if (!_) { return __future(__3, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__3", prev: __global.__frame }; try { var result;
 return flows.filter(__cb(_, __frame, 33, 1, function ___(__0, __2) { result = __2;


 deepEqual(result, [1,3,]);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try { return delay(__cb(_, __frame, 34, 1, function ___(__0, __2) { var __1 = (__2 % 2); return _(null, __1); }), val); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});

asyncTest("every", 1, function __4(_) { if (!_) { return __future(__4, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__4", prev: __global.__frame }; try { var result;
 return flows.every(__cb(_, __frame, 40, 1, function ___(__0, __2) { result = __2;


 strictEqual(result, true);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try { return delay(__cb(_, __frame, 41, 1, function ___(__0, __2) { var __1 = (__2 < 5); return _(null, __1); }), val); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});

asyncTest("every", 1, function __5(_) { if (!_) { return __future(__5, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__5", prev: __global.__frame }; try { var result;
 return flows.every(__cb(_, __frame, 47, 1, function ___(__0, __2) { result = __2;


 strictEqual(result, false);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try { return delay(__cb(_, __frame, 48, 1, function ___(__0, __2) { var __1 = (__2 < 3); return _(null, __1); }), val); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});

asyncTest("some", 1, function __6(_) { if (!_) { return __future(__6, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__6", prev: __global.__frame }; try { var result;
 return flows.some(__cb(_, __frame, 54, 1, function ___(__0, __2) { result = __2;


 strictEqual(result, true);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try { return delay(__cb(_, __frame, 55, 1, function ___(__0, __2) { var __1 = (__2 < 3); return _(null, __1); }), val); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});

asyncTest("some", 1, function __7(_) { if (!_) { return __future(__7, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__7", prev: __global.__frame }; try { var result;
 return flows.some(__cb(_, __frame, 61, 1, function ___(__0, __2) { result = __2;


 strictEqual(result, false);
 start(); _(); }), [1,2,3,4,], function __1(_, val) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try { return delay(__cb(_, __frame, 62, 1, function ___(__0, __2) { var __1 = (__2 < 0); return _(null, __1); }), val); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});

asyncTest("reduce", 1, function __8(_) { if (!_) { return __future(__8, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__8", prev: __global.__frame }; try { var result;
 return flows.reduce(__cb(_, __frame, 68, 1, function ___(__0, __2) { result = __2;


 strictEqual(result, 24);
 start(); _(); }), [1,2,3,4,], function __1(_, v, val) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try { return delay(__cb(_, __frame, 69, 1, function ___(__0, __2) { var __1 = (v * __2); return _(null, __1); }), val); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }, 1); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});

asyncTest("reduceRight", 1, function __9(_) { if (!_) { return __future(__9, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__9", prev: __global.__frame }; try { var result;
 return flows.reduceRight(__cb(_, __frame, 75, 1, function ___(__0, __2) { result = __2;


 strictEqual(result, 24);
 start(); _(); }), [1,2,3,4,], function __1(_, v, val) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try { return delay(__cb(_, __frame, 76, 1, function ___(__0, __2) { var __1 = (v * __2); return _(null, __1); }), val); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }, 1); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});

asyncTest("collectAll", 1, function __10(_) { if (!_) { return __future(__10, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__10", prev: __global.__frame }; var total, peak, count, results;



 function doIt(i) {
 return function __1(_) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try {
 count++;
 peak = Math.max(count, peak);
 return delay(__cb(_, __frame, 89, 1, function ___(__0, __1) { total += __1;
 count--;
 return _(null, (2 * i)); }), i); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }; }; try { total = 0; peak = 0; count = 0;



 return flows.spray([doIt(1),doIt(2),doIt(3),]).collectAll(__cb(_, __frame, 95, 1, function ___(__0, __1) { results = __1;
 deepEqual([total,peak,count,results,], [6,3,0,[2,4,6,],]);
 start(); _(); })); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});

asyncTest("collectOne", 1, function __11(_) { if (!_) { return __future(__11, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__11", prev: __global.__frame }; var total, peak, count, result;



 function doIt(i) {
 return function __1(_) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try {
 count++;
 peak = Math.max(count, peak);
 return delay(__cb(_, __frame, 107, 1, function ___(__0, __1) { total += __1;
 count--;
 return _(null, (2 * i)); }), i); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }; }; try { total = 0; peak = 0; count = 0;



 return flows.spray([doIt(1),doIt(2),doIt(3),]).collectOne(__cb(_, __frame, 113, 1, function ___(__0, __1) { result = __1;
 deepEqual([total,peak,count,result,], [1,3,2,2,]);
 start(); _(); })); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});

asyncTest("collectAll with limit", 1, function __12(_) { if (!_) { return __future(__12, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__12", prev: __global.__frame }; var total, peak, count, results;



 function doIt(i) {
 return function __1(_) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try {
 count++;
 peak = Math.max(count, peak);
 return delay(__cb(_, __frame, 125, 1, function ___(__0, __1) { total += __1;
 count--;
 return _(null, (2 * i)); }), i); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }; }; try { total = 0; peak = 0; count = 0;



 return flows.spray([doIt(1),doIt(2),doIt(3),], 2).collectAll(__cb(_, __frame, 131, 1, function ___(__0, __1) { results = __1;
 deepEqual([total,peak,count,results,], [6,2,0,[2,4,6,],]);
 start(); _(); })); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});

asyncTest("contexts", 3, function __13(_) { if (!_) { return __future(__13, arguments, 0); }; var __frame = __global.__frame = { file: __srcName, name: "__13", prev: __global.__frame }; var result;
 function testContext(_, x) { if (!_) { return __future(testContext, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "testContext", prev: __global.__frame }; try { var y;
 flows.setContext({
 val: x });

 return delay(__cb(_, __frame, 140, 1, function ___(__0, __1) { y = __1;
 strictEqual(y, (2 * flows.getContext().val));
 return _(null, (y + 1)); }), (2 * x)); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; }; try {











 return flows.spray([function __1(_) { if (!_) { return __future(__1, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__1", prev: __global.__frame }; try { return testContext(__cb(_, __frame, 147, 1, _), 3); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; },function __2(_) { if (!_) { return __future(__2, arguments, 0); } ; var __frame = __global.__frame = { file: __srcName, name: "__2", prev: __global.__frame }; try { return testContext(__cb(_, __frame, 151, 1, _), 5); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); }; },]).collectAll(__cb(_, __frame, 154, 1, function ___(__0, __3) { result = __3;
 deepEqual(result, [7,11,]);
 start(); _(); })); } catch (e) { e.__frame = (e.__frame || __frame.prev); __global.__frame = __frame; return __propagate(_, e); };});